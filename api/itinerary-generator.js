// api/itinerary-generator.js - Endpoint para gera√ß√£o de roteiro personalizado com Groq OTIMIZADO
const axios = require('axios');
const http = require('http');
const https = require('https');

// =======================
// Configura√ß√µes Groq - OTIMIZADAS para Roteiros
// =======================
const CONFIG = {
  groq: {
    baseURL: 'https://api.groq.com/openai/v1',
    models: {
      reasoning: 'openai/gpt-oss-120b',        // üß† Reasoning para roteiros complexos
      personality: 'llama-3.3-70b-versatile', // üêæ Personalidade Tripinha
      fast: 'llama-3.1-8b-instant',           // ‚ö° Backup r√°pido
      structured: 'llama3-groq-70b-8192-tool-use-preview' // üìã Dados estruturados
    },
    timeout: 240000,     // 4 minutos para roteiros complexos
    maxTokens: 6000,     // Mais tokens para roteiros detalhados
    temperature: 0.6     // Focado mas criativo
  },
  retries: 2,
  logging: {
    enabled: true,
    maxLength: 800
  }
};

// Cliente HTTP configurado
const apiClient = axios.create({
  timeout: CONFIG.groq.timeout,
  httpAgent: new http.Agent({ keepAlive: true }),
  httpsAgent: new https.Agent({ keepAlive: true })
});

//=======================
// Fun√ß√µes utilit√°rias otimizadas
// =======================
const utils = {
  log: (mensagem, dados, limite = CONFIG.logging.maxLength) => {
    if (!CONFIG.logging.enabled) return;
    console.log(mensagem);
    if (dados) {
      const dadosStr = typeof dados === 'string' ? dados : JSON.stringify(dados);
      console.log(dadosStr.length > limite ? dadosStr.substring(0, limite) + '...' : dadosStr);
    }
  },
  
  extrairJSONDaResposta: texto => {
    try {
      if (typeof texto === 'object' && texto !== null) {
        return JSON.stringify(texto);
      }
      
      // Tentar parse direto primeiro
      try {
        return JSON.stringify(JSON.parse(texto));
      } catch {}
      
      // Limpar markdown e coment√°rios
      const textoProcessado = texto
        .replace(/```json/g, '')
        .replace(/```/g, '')
        .replace(/\/\/.*$/gm, '')
        .replace(/\/\*[\s\S]*?\*\//g, '')
        .replace(/\r\n/g, '\n')
        .trim();
        
      // Procurar JSON no texto
      const match = textoProcessado.match(/(\{[\s\S]*\})/);
      if (match && match[0]) {
        return JSON.stringify(JSON.parse(match[0]));
      }
      
      return null;
    } catch (error) {
      console.error('Erro ao extrair JSON:', error.message);
      return null;
    }
  },
  
  isValidItineraryJSON: (jsonString, requestData) => {
    try {
      const data = typeof jsonString === 'string' ? JSON.parse(jsonString) : jsonString;
      
      // Verificar estrutura m√≠nima necess√°ria para roteiro
      const hasValidDestino = data.destino && typeof data.destino === 'string';
      const hasValidDias = Array.isArray(data.dias) && 
                           data.dias.length >= 1 &&
                           data.dias.every(dia => 
                             dia.data && 
                             dia.descricao &&
                             (dia.manha || dia.tarde || dia.noite)
                           );
      
      if (!hasValidDestino || !hasValidDias) {
        console.log('‚ùå Valida√ß√£o falhou: estrutura de roteiro inv√°lida');
        return false;
      }
      
      // Valida√ß√£o espec√≠fica para modelo de reasoning
      const hasReasoningData = data.processo_criacao && typeof data.processo_criacao === 'object';
      if (hasReasoningData) {
        console.log('üß† Dados de racioc√≠nio detectados:', Object.keys(data.processo_criacao));
      }
      
      console.log('‚úÖ Valida√ß√£o de roteiro passou');
      return true;
      
    } catch (error) {
      console.error('‚ùå Erro ao validar JSON de roteiro:', error.message);
      return false;
    }
  }
};

// =======================
// Fun√ß√£o para chamada ao Groq - OTIMIZADA para Roteiros
// =======================
async function callGroqAPI(prompt, requestData, model = CONFIG.groq.models.reasoning) {
  const apiKey = process.env.GROQ_API_KEY;
  
  if (!apiKey) {
    throw new Error('Chave da API Groq n√£o configurada (GROQ_API_KEY)');
  }

  let systemMessage;
  
  if (model === CONFIG.groq.models.reasoning) {
    // Sistema otimizado para reasoning de roteiros
    systemMessage = `Voc√™ √© um sistema especialista em cria√ß√£o de roteiros de viagem que utiliza racioc√≠nio estruturado.

PROCESSO DE RACIOC√çNIO OBRIGAT√ìRIO PARA ROTEIROS:
1. AN√ÅLISE DO PERFIL: Examine prefer√™ncias, dura√ß√£o, tipo de companhia e or√ßamento
2. CONSIDERA√á√ÉO TEMPORAL: Analise datas, clima e sazonalidade do destino
3. MAPEAMENTO DE ATIVIDADES: Correlacione atividades com perfil do viajante
4. ORGANIZA√á√ÉO LOG√çSTICA: Otimize sequ√™ncia e localiza√ß√£o das atividades
5. PERSONALIZA√á√ÉO TRIPINHA: Adicione experi√™ncias aut√™nticas da mascote

CRIT√âRIOS DE CRIA√á√ÉO:
- Roteiro DEVE ter exatamente o n√∫mero de dias solicitado
- Atividades DEVEM ser adequadas para o tipo de companhia
- Hor√°rios DEVEM ser realistas e logicamente sequenciados
- Dicas da Tripinha DEVEM ser espec√≠ficas e em 1¬™ pessoa
- Considere intensidade do roteiro e or√ßamento informado

RESULTADO: JSON estruturado com roteiro completo fundamentado no racioc√≠nio.`;
  } else if (model === CONFIG.groq.models.personality) {
    // Sistema focado na personalidade da Tripinha para roteiros
    systemMessage = `Voc√™ √© a Tripinha, uma vira-lata caramelo especialista em roteiros de viagem! üêæ

PERSONALIDADE DA TRIPINHA PARA ROTEIROS:
- Conhece cada cantinho dos destinos pessoalmente
- Cria roteiros baseados nas suas pr√≥prias aventuras
- Inclui dicas pr√°ticas que s√≥ uma "local expert" saberia
- Menciona cheiros, sons e sensa√ß√µes que vivenciou
- Sempre sugere atividades que ela "adorou fazer"
- Organiza tudo de forma divertida e eficiente

RETORNE APENAS JSON V√ÅLIDO sem formata√ß√£o markdown.`;
  } else {
    // Sistema padr√£o para modelos r√°pidos
    systemMessage = `Especialista em roteiros de viagem. Retorne apenas JSON v√°lido com roteiro detalhado e personalizado.`;
  }

  try {
    utils.log(`üß† Enviando requisi√ß√£o para Groq (${model})...`);
    
    const requestPayload = {
      model: model,
      messages: [
        {
          role: "system",
          content: systemMessage
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: model === CONFIG.groq.models.reasoning ? 0.6 : CONFIG.groq.temperature,
      max_tokens: CONFIG.groq.maxTokens,
      stream: false
    };
    
    // Adicionar par√¢metros espec√≠ficos para modelos de reasoning
    if (model === CONFIG.groq.models.reasoning) {
      requestPayload.reasoner_enabled = true;
    }
    
    const response = await apiClient({
      method: 'post',
      url: `${CONFIG.groq.baseURL}/chat/completions`,
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      },
      data: requestPayload,
      timeout: model === CONFIG.groq.models.reasoning ? CONFIG.groq.timeout : 120000
    });
    
    if (!response.data?.choices?.[0]?.message?.content) {
      throw new Error(`Formato de resposta do Groq inv√°lido (${model})`);
    }
    
    const content = response.data.choices[0].message.content;
    utils.log(`üì• Resposta recebida (${model}):`, content.substring(0, 400));
    
    return utils.extrairJSONDaResposta(content);
    
  } catch (error) {
    console.error(`‚ùå Erro na chamada √† API Groq (${model}):`, error.message);
    if (error.response) {
      utils.log(`üî¥ Resposta de erro do Groq (${model}):`, error.response.data);
    }
    throw error;
  }
}

// =======================
// Sistema de retry com fallback inteligente entre modelos
// =======================
async function retryWithBackoffAndFallback(prompt, requestData, maxAttempts = CONFIG.retries) {
  const modelOrder = [
    CONFIG.groq.models.reasoning,     // Primeiro: Reasoning (melhor qualidade)
    CONFIG.groq.models.personality,  // Segundo: Personalidade Tripinha
    CONFIG.groq.models.fast          // Terceiro: Backup r√°pido
  ];
  
  for (const model of modelOrder) {
    console.log(`üîÑ Tentando modelo: ${model}`);
    
    let attempt = 1;
    let delay = 2000;
    
    while (attempt <= maxAttempts) {
      try {
        console.log(`üîÑ Modelo ${model} - Tentativa ${attempt}/${maxAttempts}...`);
        
        const result = await callGroqAPI(prompt, requestData, model);
        
        if (result && utils.isValidItineraryJSON(result, requestData)) {
          console.log(`‚úÖ Sucesso com ${model} na tentativa ${attempt}`);
          return { result, model };
        } else {
          console.log(`‚ùå ${model} - Tentativa ${attempt}: resposta inv√°lida`);
        }
        
      } catch (error) {
        console.error(`‚ùå ${model} - Tentativa ${attempt} falhou:`, error.message);
      }
      
      if (attempt === maxAttempts) {
        console.log(`üö´ ${model}: Todas as ${maxAttempts} tentativas falharam`);
        break;
      }
      
      console.log(`‚è≥ Aguardando ${delay}ms antes da pr√≥xima tentativa...`);
      await new Promise(resolve => setTimeout(resolve, delay));
      delay = Math.min(delay * 1.2, 8000);
      attempt++;
    }
  }
  
  console.log('üö´ Todos os modelos falharam');
  return null;
}

// =======================
// Fun√ß√µes auxiliares otimizadas
// =======================
function calcularDiasViagem(dataInicio, dataFim) {
  if (!dataInicio) return 1;
  
  const inicio = new Date(dataInicio);
  
  // Se n√£o tiver data fim, assume 1 dia
  if (!dataFim) return 1;
  
  const fim = new Date(dataFim);
  
  // Calcular diferen√ßa em dias
  const diffTempo = Math.abs(fim - inicio);
  const diffDias = Math.ceil(diffTempo / (1000 * 60 * 60 * 24)) + 1;  // +1 para incluir o dia de chegada
  
  return diffDias;
}

function gerarDatasRoteiro(dataInicio, diasViagem) {
  const datas = [];
  const dataAtual = new Date(dataInicio);
  
  for (let i = 0; i < diasViagem; i++) {
    const ano = dataAtual.getFullYear();
    const mes = String(dataAtual.getMonth() + 1).padStart(2, '0');
    const dia = String(dataAtual.getDate()).padStart(2, '0');
    datas.push(`${ano}-${mes}-${dia}`);
    dataAtual.setDate(dataAtual.getDate() + 1);
  }
  
  return datas;
}

// =======================
// Prompt Engineering Avan√ßado para Roteiros
// =======================
function gerarPromptRoteiro(params) {
  const {
    destino,
    pais,
    dataInicio,
    dataFim,
    horaChegada,
    horaSaida,
    diasViagem,
    tipoViagem,
    tipoCompanhia,
    preferencias
  } = params;
  
  // Mapear o tipo de viagem para descri√ß√£o
  const descricaoTipoViagem = {
    'relaxar': 'relaxamento e descanso',
    'aventura': 'aventura e adrenalina',
    'cultura': 'cultura, hist√≥ria e gastronomia',
    'urbano': 'urbanismo, compras e vida noturna'
  }[tipoViagem] || 'cultura e experi√™ncias variadas';
  
  // Mapear o tipo de companhia para descri√ß√£o
  const descricaoTipoCompanhia = {
    'sozinho': 'uma pessoa viajando sozinha',
    'casal': 'um casal em viagem rom√¢ntica',
    'familia': 'uma fam√≠lia com crian√ßas',
    'amigos': 'um grupo de amigos'
  }[tipoCompanhia] || 'um viajante';
  
  // Mapear intensidade e or√ßamento
  const intensidadeInfo = {
    'leve': '2-3 atividades por dia (ritmo relaxado)',
    'moderado': '4-5 atividades por dia (ritmo equilibrado)',
    'intenso': '6+ atividades por dia (ritmo acelerado)'
  };
  
  const orcamentoInfo = {
    'economico': 'econ√¥mico (priorize atividades gratuitas e de baixo custo)',
    'medio': 'm√©dio (misture atividades gratuitas e pagas)',
    'alto': 'alto (inclua experi√™ncias premium sem limita√ß√µes de custo)'
  };
  
  // Criar informa√ß√µes detalhadas de viajantes
  let infoViajantes = descricaoTipoCompanhia;
  if (tipoCompanhia === 'familia' && preferencias) {
    const adultos = preferencias.quantidade_adultos || 2;
    const criancas = preferencias.quantidade_criancas || 0;
    const bebes = preferencias.quantidade_bebes || 0;
    infoViajantes += ` (${adultos} adulto${adultos > 1 ? 's' : ''}`;
    if (criancas > 0) infoViajantes += `, ${criancas} crian√ßa${criancas > 1 ? 's' : ''}`;
    if (bebes > 0) infoViajantes += `, ${bebes} beb√™${bebes > 1 ? 's' : ''}`;
    infoViajantes += ')';
  }
  
  // Gerar datas para cada dia
  const datasRoteiro = gerarDatasRoteiro(dataInicio, diasViagem);
  
  return `# üß† SISTEMA INTELIGENTE DE CRIA√á√ÉO DE ROTEIROS DE VIAGEM

## üìä DADOS DO VIAJANTE PARA AN√ÅLISE:
**Perfil B√°sico:**
- Destino: ${destino}, ${pais}
- Per√≠odo: ${dataInicio} a ${dataFim || dataInicio} (${diasViagem} dia${diasViagem > 1 ? 's' : ''})
- Composi√ß√£o: ${infoViajantes}
- Hor√°rio de chegada: ${horaChegada || 'N√£o informado'}
- Hor√°rio de partida: ${horaSaida || 'N√£o informado'}
- Prefer√™ncia principal: ${descricaoTipoViagem}
- Intensidade: ${intensidadeInfo[preferencias?.intensidade_roteiro] || intensidadeInfo['moderado']}
- Or√ßamento: ${orcamentoInfo[preferencias?.orcamento_nivel] || orcamentoInfo['medio']}

## üéØ PROCESSO DE RACIOC√çNIO OBRIGAT√ìRIO:

### PASSO 1: AN√ÅLISE TEMPORAL E CLIM√ÅTICA
- Determine a esta√ß√£o exata em ${destino} durante ${dataInicio} a ${dataFim || dataInicio}
- Analise condi√ß√µes clim√°ticas t√≠picas para o per√≠odo
- Identifique eventos sazonais, festivais ou atividades especiais
- Considere hor√°rios de funcionamento e melhores momentos para cada atividade

### PASSO 2: MAPEAMENTO DE ATIVIDADES POR PERFIL
Para ${infoViajantes} com foco em ${descricaoTipoViagem}:
- Quais s√£o as experi√™ncias IMPERD√çVEIS no destino?
- Que atividades se alinham perfeitamente com as prefer√™ncias?
- Como adaptar experi√™ncias para este tipo de companhia espec√≠fico?
- Quais locais visitados pela Tripinha foram mais marcantes?

### PASSO 3: ORGANIZA√á√ÉO LOG√çSTICA INTELIGENTE
- Agrupe atividades por proximidade geogr√°fica para otimizar deslocamentos
- Considere hor√°rios de funcionamento e tempos de deslocamento realistas
- Balanceie atividades de alta e baixa energia ao longo do dia
- Respeite a intensidade escolhida: ${intensidadeInfo[preferencias?.intensidade_roteiro] || intensidadeInfo['moderado']}

### PASSO 4: PERSONALIZA√á√ÉO EXPERIENCIAL
- Incorpore experi√™ncias sensoriais que a Tripinha vivenciou
- Adicione dicas pr√°ticas baseadas nas aventuras da mascote
- Inclua descobertas locais que apenas um "conhecedor" saberia
- Sugira hor√°rios espec√≠ficos baseados na experi√™ncia da Tripinha

### PASSO 5: VALIDA√á√ÉO E REFINAMENTO
- Verifique se cada dia tem o n√∫mero apropriado de atividades para a intensidade
- Confirme que todas as atividades s√£o adequadas para ${infoViajantes}
- Valide que o roteiro considera ${horaChegada || 'hor√°rio de chegada'} e ${horaSaida || 'hor√°rio de partida'}
- Assegure que h√° equil√≠brio entre atividades obrigat√≥rias e tempo livre

## üìã FORMATO DE RESPOSTA (JSON ESTRUTURADO):

\`\`\`json
{
  "processo_criacao": {
    "analise_temporal": "Resumo das condi√ß√µes clim√°ticas e sazonais para ${dataInicio} a ${dataFim || dataInicio}",
    "adaptacao_perfil": "Como o roteiro foi adaptado para ${infoViajantes} com foco em ${descricaoTipoViagem}",
    "organizacao_logistica": "Estrat√©gia de organiza√ß√£o geogr√°fica e temporal das atividades",
    "personalizacao_tripinha": "Como as experi√™ncias da Tripinha influenciaram as escolhas"
  },
  "destino": "${destino}, ${pais}",
  "periodo_viagem": "${dataInicio} a ${dataFim || dataInicio}",
  "perfil_viajante": "${infoViajantes}",
  "intensidade_roteiro": "${intensidadeInfo[preferencias?.intensidade_roteiro] || intensidadeInfo['moderado']}",
  "dias": [${datasRoteiro.map((data, index) => `
    {
      "dia_numero": ${index + 1},
      "data": "${data}",
      "dia_semana": "Determine o dia da semana para ${data}",
      "descricao": "Descri√ß√£o tem√°tica do dia baseada nas atividades planejadas",
      ${index === 0 && horaChegada ? `"horario_especial_chegada": "${horaChegada}",` : ''}
      ${index === diasViagem - 1 && horaSaida ? `"horario_especial_partida": "${horaSaida}",` : ''}
      "clima_previsto": {
        "estacao": "Esta√ß√£o no destino",
        "temperatura": "Faixa de temperatura esperada",
        "condicoes": "Condi√ß√µes clim√°ticas (sol, chuva, etc.)",
        "dicas_vestuario": "Dicas espec√≠ficas do que vestir"
      },
      "manha": {
        "periodo": "08:00-12:00",
        "atividades": [
          {
            "horario": "HH:MM",
            "local": "Nome espec√≠fico do local",
            "descricao": "Descri√ß√£o detalhada da atividade",
            "duracao_estimada": "XX minutos",
            "tags": ["Imperd√≠vel", "Fam√≠lia", "Cultural", etc],
            "dica_tripinha": "Dica em 1¬™ pessoa da Tripinha: 'Quando eu visitei este lugar, descobri que...'",
            "custo_aproximado": "Gratuito/Baixo/M√©dio/Alto",
            "dicas_praticas": "Informa√ß√µes √∫teis sobre hor√°rios, ingressos, etc."
          }
        ]
      },
      "tarde": {
        "periodo": "12:00-18:00", 
        "atividades": [
          // Mesmo formato da manh√£
        ]
      },
      "noite": {
        "periodo": "18:00-22:00",
        "atividades": [
          // Mesmo formato da manh√£
        ]
      },
      "resumo_dia": "Resumo das experi√™ncias e descobertas do dia",
      "total_atividades": "X atividades planejadas"
    }`).join(',\n  ')
  }],
  "resumo_roteiro": {
    "total_dias": ${diasViagem},
    "foco_principal": "${descricaoTipoViagem}",
    "intensidade_aplicada": "${intensidadeInfo[preferencias?.intensidade_roteiro] || intensidadeInfo['moderado']}",
    "pontos_turisticos_incluidos": "Lista dos principais pontos visitados",
    "experiencias_unicas": "Experi√™ncias especiais que tornam este roteiro √∫nico"
  },
  "dicas_gerais_tripinha": [
    "Dica geral 1 da Tripinha baseada em sua experi√™ncia no destino",
    "Dica geral 2 sobre o que n√£o pode esquecer de fazer",
    "Dica geral 3 sobre descobertas especiais do destino"
  ]
}
\`\`\`

## üîç VALIDA√á√ÉO FINAL OBRIGAT√ìRIA:
Antes de responder, confirme que:
- ‚úÖ O roteiro tem EXATAMENTE ${diasViagem} dia${diasViagem > 1 ? 's' : ''} completo${diasViagem > 1 ? 's' : ''}
- ‚úÖ Cada dia respeita a intensidade: ${intensidadeInfo[preferencias?.intensidade_roteiro] || intensidadeInfo['moderado']}
- ‚úÖ Atividades s√£o adequadas para ${infoViajantes}
- ‚úÖ Hor√°rios s√£o realistas e bem distribu√≠dos
- ‚úÖ Informa√ß√µes clim√°ticas s√£o precisas para ${dataInicio} a ${dataFim || dataInicio}
- ‚úÖ Dicas da Tripinha s√£o espec√≠ficas e em 1¬™ pessoa
- ‚úÖ Considerou ${horaChegada || 'hor√°rio de chegada'} e ${horaSaida || 'hor√°rio de partida'}
- ‚úÖ Incluiu experi√™ncias focadas em ${descricaoTipoViagem}

**Execute o racioc√≠nio passo-a-passo e crie um roteiro detalhado, personalizado e inesquec√≠vel!**`;
}

// =======================
// Handler principal da API - OTIMIZADO
// =======================
module.exports = async function handler(req, res) {
  let isResponseSent = false;
  const serverTimeout = setTimeout(() => {
    if (!isResponseSent) {
      isResponseSent = true;
      console.log('‚è∞ Timeout do servidor atingido');
      return res.status(500).json({
        tipo: "erro",
        message: "Tempo limite excedido. Tente novamente.",
        error: "timeout"
      });
    }
  }, 420000); // 7 minutos para roteiros complexos

  // Headers CORS
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST,OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

  if (req.method === 'OPTIONS') {
    isResponseSent = true;
    clearTimeout(serverTimeout);
    return res.status(200).end();
  }
  
  if (req.method !== 'POST') {
    isResponseSent = true;
    clearTimeout(serverTimeout);
    return res.status(405).json({ error: "M√©todo n√£o permitido" });
  }

  try {
    console.log('üß† === BENETRIP GROQ ITINERARY API v2.0 - OTIMIZADA ===');
    
    if (!req.body) {
      isResponseSent = true;
      clearTimeout(serverTimeout);
      return res.status(400).json({ error: "Nenhum dado fornecido na requisi√ß√£o" });
    }
    
    const requestData = typeof req.body === 'string' ? JSON.parse(req.body) : req.body;
    
    // Verificar se a chave do Groq est√° configurada
    if (!process.env.GROQ_API_KEY) {
      console.error('‚ùå GROQ_API_KEY n√£o configurada');
      if (!isResponseSent) {
        isResponseSent = true;
        clearTimeout(serverTimeout);
        return res.status(500).json({
          tipo: "erro",
          message: "Servi√ßo temporariamente indispon√≠vel.",
          error: "groq_api_key_missing"
        });
      }
      return;
    }
    
    // Validar par√¢metros obrigat√≥rios
    const { destino, pais, dataInicio } = requestData;
    if (!destino || !dataInicio) {
      isResponseSent = true;
      clearTimeout(serverTimeout);
      return res.status(400).json({ 
        error: 'Par√¢metros obrigat√≥rios: destino, dataInicio' 
      });
    }
    
    // Calcular n√∫mero de dias
    const diasViagem = calcularDiasViagem(requestData.dataInicio, requestData.dataFim);
    
    // Log dos dados recebidos
    utils.log('üìä Dados da requisi√ß√£o de roteiro:', {
      destino: destino,
      pais: pais,
      diasViagem: diasViagem,
      dataInicio: requestData.dataInicio,
      dataFim: requestData.dataFim,
      tipoViagem: requestData.tipoViagem,
      tipoCompanhia: requestData.tipoCompanhia,
      intensidade: requestData.preferencias?.intensidade_roteiro,
      orcamento: requestData.preferencias?.orcamento_nivel
    });
    
    // Gerar prompt otimizado para roteiros
    const prompt = gerarPromptRoteiro(requestData);
    console.log('üìù Prompt de roteiro gerado para Groq');
    
    // Tentar obter roteiro com fallback inteligente entre modelos
    const resultado = await retryWithBackoffAndFallback(prompt, requestData);
    
    if (!resultado) {
      console.error('üö´ Falha em todos os modelos do Groq para roteiro');
      if (!isResponseSent) {
        isResponseSent = true;
        clearTimeout(serverTimeout);
        return res.status(503).json({
          tipo: "erro",
          message: "N√£o foi poss√≠vel gerar o roteiro no momento. Tente novamente em alguns instantes.",
          error: "groq_all_models_failed"
        });
      }
      return;
    }
    
    const { result: roteiroBruto, model: modeloUsado } = resultado;
    
    // Processar e retornar resultado
    try {
      const dados = typeof roteiroBruto === 'string' ? 
        JSON.parse(roteiroBruto) : roteiroBruto;
      
      // Validar estrutura b√°sica do roteiro
      if (!dados.dias || !Array.isArray(dados.dias)) {
        throw new Error('Estrutura de roteiro inv√°lida: falta array de dias');
      }
      
      // Adicionar metadados
      dados.metadados = {
        modelo: modeloUsado,
        provider: 'groq',
        versao: '2.0-otimizada',
        timestamp: new Date().toISOString(),
        reasoning_enabled: modeloUsado === CONFIG.groq.models.reasoning,
        destino_completo: `${destino}, ${pais}`,
        dias_viagem: diasViagem,
        gerado_em: new Date().toLocaleString('pt-BR')
      };
      
      console.log('üéâ Roteiro processado com sucesso!');
      console.log('üß† Modelo usado:', modeloUsado);
      console.log('üìç Destino:', `${destino}, ${pais}`);
      console.log('üìã Roteiro gerado:', {
        diasTotal: dados.dias?.length || 0,
        temProcessoCriacao: !!dados.processo_criacao,
        temDicasTripinha: !!dados.dicas_gerais_tripinha,
        periodoViagem: `${requestData.dataInicio} a ${requestData.dataFim || requestData.dataInicio}`
      });
      
      if (!isResponseSent) {
        isResponseSent = true;
        clearTimeout(serverTimeout);
        return res.status(200).json({
          tipo: "groq_success",
          modelo: modeloUsado,
          roteiro: dados
        });
      }
      
    } catch (processError) {
      console.error('‚ùå Erro ao processar resposta final do roteiro:', processError.message);
      
      if (!isResponseSent) {
        isResponseSent = true;
        clearTimeout(serverTimeout);
        return res.status(200).json({
          tipo: "groq_partial_success",
          modelo: modeloUsado,
          roteiro_bruto: roteiroBruto
        });
      }
    }
    
  } catch (globalError) {
    console.error('üí• Erro global no gerador de roteiros:', globalError.message);
    
    if (!isResponseSent) {
      isResponseSent = true;
      clearTimeout(serverTimeout);
      return res.status(500).json({
        tipo: "erro",
        message: "Erro interno do servidor. Tente novamente.",
        error: globalError.message
      });
    }
  } finally {
    clearTimeout(serverTimeout);
    if (!isResponseSent) {
      isResponseSent = true;
      res.status(500).json({
        tipo: "erro",
        message: "Erro inesperado. Tente novamente.",
        error: "unexpected_error"
      });
    }
  }
};
