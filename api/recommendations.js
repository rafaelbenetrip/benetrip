// api/recommendations.js - Endpoint da API Vercel para recomenda√ß√µes de destino
import axios from 'axios';

export default async function handler(req, res) {
  console.log('Recebendo requisi√ß√£o na API recommendations!');
  
  // Configurar cabe√ßalhos CORS
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,POST');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  
  // Lidar com requisi√ß√µes OPTIONS (CORS preflight)
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  // Apenas permitir requisi√ß√µes POST
  if (req.method !== 'POST') {
    return res.status(405).json({ error: "M√©todo n√£o permitido" });
  }

  try {
    // Log para debugging
    console.log('Processando requisi√ß√£o para recomenda√ß√µes no Vercel');
    
    // Extrair dados da requisi√ß√£o
    const requestData = req.body;
    console.log('Dados recebidos:', JSON.stringify(requestData).substring(0, 200) + '...');
    
    // Verificar se temos informa√ß√µes suficientes
    if (!requestData) {
      throw new Error("Dados de prefer√™ncias n√£o fornecidos");
    }
    
    // Dados mockados para fallback em caso de erro
    const mockData = {
      "topPick": {
        "destino": "Medell√≠n",
        "pais": "Col√¥mbia",
        "codigoPais": "CO",
        "descricao": "Cidade da eterna primavera com clima perfeito o ano todo",
        "porque": "Clima primaveril o ano todo com paisagens montanhosas deslumbrantes",
        "destaque": "Passeio de telef√©rico, Comuna 13 e fazendas de caf√© pr√≥ximas",
        "comentario": "Eu simplesmente AMEI Medell√≠n! √â perfeito para quem busca um mix de cultura e natureza! üêæ",
        "preco": {
          "voo": 1800,
          "hotel": 350
        }
      },
      "alternativas": [
        {
          "destino": "Montevid√©u",
          "pais": "Uruguai",
          "codigoPais": "UY",
          "porque": "Clima costeiro tranquilo com frutos do mar deliciosos e espa√ßos culturais",
          "preco": {
            "voo": 1500,
            "hotel": 300
          }
        },
        {
          "destino": "Buenos Aires",
          "pais": "Argentina",
          "codigoPais": "AR",
          "porque": "Capital cosmopolita com rica vida cultural, teatros e arquitetura europeia",
          "preco": {
            "voo": 1400,
            "hotel": 280
          }
        },
        {
          "destino": "Santiago",
          "pais": "Chile",
          "codigoPais": "CL",
          "porque": "Moderna capital cercada pela Cordilheira dos Andes com excelentes vinhos",
          "preco": {
            "voo": 1600,
            "hotel": 350
          }
        },
        {
          "destino": "Cusco",
          "pais": "Peru",
          "codigoPais": "PE",
          "porque": "Portal para Machu Picchu com rica hist√≥ria inca e arquitetura colonial",
          "preco": {
            "voo": 1700,
            "hotel": 250
          }
        }
      ],
      "surpresa": {
        "destino": "Cartagena",
        "pais": "Col√¥mbia",
        "codigoPais": "CO",
        "descricao": "Joia colonial no Caribe colombiano com praias paradis√≠acas",
        "porque": "Cidade murada hist√≥rica com ruas coloridas, cultura vibrante e praias maravilhosas",
        "destaque": "Passeio de barco pelas Ilhas do Ros√°rio com √°guas cristalinas",
        "comentario": "Cartagena √© um tesouro escondido que vai te conquistar! As cores, a m√∫sica e a comida caribenha formam uma experi√™ncia inesquec√≠vel! üêæüå¥",
        "preco": {
          "voo": 1950,
          "hotel": 320
        }
      }
    };
    
    // Gerar prompt baseado nos dados do usu√°rio
    const prompt = gerarPromptParaDestinos(requestData);
    
    // Chamar a API Perplexity
    try {
      console.log('Usando Perplexity para recomenda√ß√µes');
      
      // Verificar se API key da Perplexity est√° configurada
      if (!process.env.PERPLEXITY_API_KEY) {
        throw new Error('PERPLEXITY_API_KEY n√£o configurada');
      }
      
      const perplexityResponse = await callPerplexityAPI(prompt);
      
      console.log('Resposta recebida da Perplexity');
      
      // Retornar a resposta formatada
      return res.status(200).json({
        tipo: "perplexity",
        conteudo: perplexityResponse
      });
    } catch (perplexityError) {
      console.error('Erro ao usar Perplexity:', perplexityError);
      
      // Tentar outros modelos como fallback se dispon√≠veis
      try {
        let fallbackResponse = null;
        
        // Tentar OpenAI como fallback se configurada
        if (process.env.OPENAI_API_KEY) {
          console.log('Tentando OpenAI como fallback');
          fallbackResponse = await callOpenAIAPI(prompt);
        } 
        // Tentar Claude como segundo fallback
        else if (process.env.CLAUDE_API_KEY) {
          console.log('Tentando Claude como fallback');
          fallbackResponse = await callClaudeAPI(prompt);
        }
        
        if (fallbackResponse) {
          return res.status(200).json({
            tipo: "fallback",
            conteudo: fallbackResponse
          });
        } else {
          throw new Error('Nenhum servi√ßo de IA dispon√≠vel');
        }
      } catch (fallbackError) {
        console.error('Erro ao usar servi√ßos de fallback:', fallbackError);
        
        // Retornar dados mockados se nenhum servi√ßo estiver dispon√≠vel
        return res.status(200).json({
          tipo: "mockado",
          conteudo: JSON.stringify(mockData)
        });
      }
    }
    
  } catch (error) {
    console.error('Erro na API de recomenda√ß√µes Vercel:', error);
    
    return res.status(500).json({ 
      error: "Erro ao processar solicita√ß√£o de IA",
      message: error.message
    });
  }
}

// Chamar a API da Perplexity
async function callPerplexityAPI(prompt) {
  try {
    const apiKey = process.env.PERPLEXITY_API_KEY;
    
    const response = await axios({
      method: 'post',
      url: 'https://api.perplexity.ai/chat/completions',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      },
      data: {
        model: 'sonar',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© a Tripinha, uma cachorra vira-lata caramelo especialista em viagens da Benetrip. Voc√™ usa um tom amig√°vel, alegre e entusiasmado. Voc√™ conhece sobre destinos tur√≠sticos em todo o mundo e pode recomendar lugares baseados nas prefer√™ncias dos usu√°rios.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 4000,
        response_format: {
          type: "json_schema",
          json_schema: {
            type: "object",
            properties: {
              topPick: {
                type: "object",
                properties: {
                  destino: { type: "string" },
                  pais: { type: "string" },
                  codigoPais: { type: "string" },
                  descricao: { type: "string" },
                  porque: { type: "string" },
                  destaque: { type: "string" },
                  comentario: { type: "string" },
                  preco: {
                    type: "object",
                    properties: {
                      voo: { type: "number" },
                      hotel: { type: "number" }
                    }
                  }
                }
              },
              alternativas: {
                type: "array",
                items: {
                  type: "object",
                  properties: {
                    destino: { type: "string" },
                    pais: { type: "string" },
                    codigoPais: { type: "string" },
                    porque: { type: "string" },
                    preco: {
                      type: "object",
                      properties: {
                        voo: { type: "number" },
                        hotel: { type: "number" }
                      }
                    }
                  }
                }
              },
              surpresa: {
                type: "object",
                properties: {
                  destino: { type: "string" },
                  pais: { type: "string" },
                  codigoPais: { type: "string" },
                  descricao: { type: "string" },
                  porque: { type: "string" },
                  destaque: { type: "string" },
                  comentario: { type: "string" },
                  preco: {
                    type: "object",
                    properties: {
                      voo: { type: "number" },
                      hotel: { type: "number" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      timeout: 30000 // 30 segundos
    });
    
    // Retorna diretamente o conte√∫do JSON da resposta
    return response.data.choices[0].message.content;
  } catch (error) {
    console.error('Erro na chamada √† API Perplexity:', error);
    if (error.response) {
      console.error('Resposta de erro:', error.response.data);
    }
    throw error;
  }
}

// Chamar a API da OpenAI como fallback
async function callOpenAIAPI(prompt) {
  try {
    const apiKey = process.env.OPENAI_API_KEY;
    
    const response = await axios({
      method: 'post',
      url: 'https://api.openai.com/v1/chat/completions',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      },
      data: {
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: "Voc√™ √© a Tripinha, uma cachorra vira-lata caramelo especialista em viagens da Benetrip."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 4000,
        response_format: { "type": "json_object" }
      },
      timeout: 30000
    });
    
    return response.data.choices[0].message.content;
  } catch (error) {
    console.error('Erro na chamada √† API OpenAI:', error);
    throw error;
  }
}

// Chamar a API do Claude como fallback secund√°rio
async function callClaudeAPI(prompt) {
  try {
    const apiKey = process.env.CLAUDE_API_KEY;
    
    const response = await axios({
      method: 'post',
      url: 'https://api.anthropic.com/v1/messages',
      headers: {
        'anthropic-api-key': apiKey,
        'anthropic-version': '2023-06-01',
        'Content-Type': 'application/json'
      },
      data: {
        model: "claude-3-sonnet-20240229",
        max_tokens: 4000,
        messages: [
          {
            role: "user",
            content: prompt
          }
        ]
      },
      timeout: 30000
    });
    
    return response.data.content[0].text;
  } catch (error) {
    console.error('Erro na chamada √† API Claude:', error);
    throw error;
  }
}

// Fun√ß√£o para gerar prompt adequado para a IA
function gerarPromptParaDestinos(dados) {
  // Extrair informa√ß√µes relevantes dos dados recebidos
  const companhia = getCompanhiaText(dados.companhia);
  const preferencia = getPreferenciaText(dados.preferencia_viagem);
  const cidadeOrigem = dados.cidade_partida?.name || 'origem n√£o especificada';
  const orcamento = dados.orcamento_valor || 'flex√≠vel';
  const moeda = dados.moeda_escolhida || 'BRL';
  
  // Datas de viagem
  let dataIda = 'n√£o especificada';
  let dataVolta = 'n√£o especificada';
  
  if (dados.datas) {
    if (typeof dados.datas === 'string' && dados.datas.includes(',')) {
      const partes = dados.datas.split(',');
      dataIda = partes[0];
      dataVolta = partes[1];
    } else if (dados.datas.dataIda && dados.datas.dataVolta) {
      dataIda = dados.datas.dataIda;
      dataVolta = dados.datas.dataVolta;
    }
  }

  // Construir prompt detalhado
  return `Preciso que recomende destinos de viagem baseados nestas prefer√™ncias do usu√°rio:

- Partindo de: ${cidadeOrigem}
- Viajando: ${companhia}
- Buscando principalmente: ${preferencia}
- Or√ßamento para passagens: ${orcamento} ${moeda}
- Per√≠odo: ${dataIda} a ${dataVolta}

Voc√™ deve usar a internet para pesquisar destinos reais que combinem com essas prefer√™ncias.
Forne√ßa destinos relevantes para o perfil do usu√°rio considerando:
- Atra√ß√µes que combinam com as prefer√™ncias indicadas
- Clima adequado no per√≠odo de viagem
- Op√ß√µes dentro do or√ßamento mencionado
- Facilidade de acesso a partir da origem

Forne√ßa EXATAMENTE o seguinte formato JSON, sem texto adicional antes ou depois:
{
  "topPick": {
    "destino": "Nome da Cidade",
    "pais": "Nome do Pa√≠s",
    "codigoPais": "XX", // c√≥digo de 2 letras do pa√≠s
    "descricao": "Breve descri√ß√£o do destino com at√© 100 caracteres",
    "porque": "Raz√£o principal para visitar, relacionada √†s prefer√™ncias do usu√°rio",
    "destaque": "Uma experi√™ncia √∫nica neste destino",
    "comentario": "Um coment√°rio animado da Tripinha, como se voc√™ fosse um cachorro entusiasmado",
    "preco": {
      "voo": n√∫mero, // valor estimado em ${moeda}
      "hotel": n√∫mero // valor por noite estimado em ${moeda}
    }
  },
  "alternativas": [
    // EXATAMENTE 4 destinos alternativos, cada um com:
    {
      "destino": "Nome da Cidade",
      "pais": "Nome do Pa√≠s", 
      "codigoPais": "XX",
      "porque": "Raz√£o principal para visitar",
      "preco": {
        "voo": n√∫mero,
        "hotel": n√∫mero
      }
    }
  ],
  "surpresa": {
    // Um destino surpresa menos √≥bvio mas que tamb√©m combine com as prefer√™ncias
    "destino": "Nome da Cidade",
    "pais": "Nome do Pa√≠s",
    "codigoPais": "XX",
    "descricao": "Breve descri√ß√£o do destino com at√© 100 caracteres",
    "porque": "Raz√£o principal para visitar, destacando o fator surpresa",
    "destaque": "Uma experi√™ncia √∫nica e surpreendente neste destino",
    "comentario": "Um coment√°rio animado da Tripinha sobre este destino surpresa",
    "preco": {
      "voo": n√∫mero,
      "hotel": n√∫mero
    }
  }
}

Cada destino DEVE ser realista e ter pre√ßos estimados plaus√≠veis. N√£o inclua texto explicativo antes ou depois do JSON.`;
}

// Fun√ß√£o auxiliar para obter texto de companhia
function getCompanhiaText(value) {
  const options = {
    0: "sozinho(a)",
    1: "em casal (viagem rom√¢ntica)",
    2: "em fam√≠lia",
    3: "com amigos"
  };
  return options[value] || "sozinho(a)";
}

// Fun√ß√£o auxiliar para obter texto de prefer√™ncia
function getPreferenciaText(value) {
  const options = {
    0: "relaxamento e descanso (praias, resorts tranquilos, spas)",
    1: "aventura e atividades ao ar livre (trilhas, esportes, natureza)",
    2: "cultura, hist√≥ria e gastronomia (museus, centros hist√≥ricos, culin√°ria local)",
    3: "experi√™ncia urbana, compras e vida noturna (centros urbanos, lojas, restaurantes)"
  };
  return options[value] || "experi√™ncias diversificadas de viagem";
}
