
// api/recommendations.js - Endpoint da API Vercel para recomenda√ß√µes de destino
// Vers√£o 10.1 - SUPORTE COMPLETO A VIAGENS DE CARRO üöó + √îNIBUS üöå + AVI√ÉO ‚úàÔ∏è
const axios = require('axios');
const http = require('http');
const https = require('https');

// =======================
// Configura√ß√µes Groq - REASONING OPTIMIZED
// =======================
const CONFIG = {
    groq: {
        baseURL: 'https://api.groq.com/openai/v1',
        models: {
            reasoning: 'openai/gpt-oss-120b',               // Reasoning principal
            personality: 'llama-3.3-70b-versatile',         // Personalidade Tripinha
            fast: 'llama-3.1-8b-instant',                   // Backup r√°pido
            toolUse: 'llama3-groq-70b-8192-tool-use-preview' // APIs futuras
        },
        timeout: 180000,   // 3 minutos para reasoning
        maxTokens: 5000,   // Reduzido pois n√£o precisa de pre√ßos
        temperature: 0.6   // Focado para an√°lise
    },
    retries: 2,
    logging: {
        enabled: true,
        maxLength: 600
    },
    budgetThreshold: 401  // Limite para viagens rodovi√°rias
};

// =======================
// Cliente HTTP configurado
// =======================
const apiClient = axios.create({
    timeout: CONFIG.groq.timeout,
    httpAgent: new http.Agent({ keepAlive: true }),
    httpsAgent: new https.Agent({ keepAlive: true })
});

// =======================
// Fun√ß√µes utilit√°rias
// =======================
const utils = {
    validarCodigoIATA: codigo => codigo && /^[A-Z]{3}$/.test(codigo),

    log: (mensagem, dados, limite = CONFIG.logging.maxLength) => {
        if (!CONFIG.logging.enabled) return;
        console.log(mensagem);
        if (dados) {
            const dadosStr = typeof dados === 'string' ? dados : JSON.stringify(dados);
            console.log(dadosStr.length > limite ? dadosStr.substring(0, limite) + '...' : dadosStr);
        }
    },

    formatarData: data => {
        const ano = data.getFullYear();
        const mes = String(data.getMonth() + 1).padStart(2, '0');
        const dia = String(data.getDate()).padStart(2, '0');
        return `${ano}-${mes}-${dia}`;
    },

    // üöóüöå‚úàÔ∏è FUN√á√ÉO ATUALIZADA: Determinar tipo de viagem incluindo CARRO
    determinarTipoViagem: (orcamento, moeda, viagemCarro) => {
        // üöó PRIORIDADE 1: Se selecionou viagem de carro
        if (viagemCarro === 1 || viagemCarro === '1' || viagemCarro === true) {
            return 'carro';
        }
        
        // ‚úàÔ∏è Se n√£o tem or√ßamento definido, assume a√©reo
        if (!orcamento || orcamento === 'flex√≠vel') return 'aereo';
        
        let valorEmBRL = parseFloat(orcamento);
        
        // Converter para BRL se necess√°rio
        if (moeda && moeda !== 'BRL') {
            const taxasConversao = {
                'USD': 5.0,
                'EUR': 5.5,
                'GBP': 6.3,
                'JPY': 0.033
            };
            valorEmBRL = valorEmBRL * (taxasConversao[moeda] || 5.0);
        }
        
        // üöå Se or√ßamento baixo, sugere rodovi√°rio
        return valorEmBRL < CONFIG.budgetThreshold ? 'rodoviario' : 'aereo';
    },

    // Extrair informa√ß√µes da cidade de partida do autocomplete
    extrairInfoCidadePartida: (cidadePartida) => {
        // Caso seja string (compatibilidade com vers√µes antigas)
        if (typeof cidadePartida === 'string') {
            return {
                cidade: cidadePartida,
                pais: 'Brasil', // Default
                sigla_estado: 'SP', // Default
                iata: 'GRU' // Default
            };
        }
        
        // Caso seja objeto estruturado do autocomplete
        return {
            cidade: cidadePartida?.cidade || cidadePartida?.name || 'Cidade n√£o especificada',
            pais: cidadePartida?.pais || cidadePartida?.country || 'Pa√≠s n√£o especificado',
            sigla_estado: cidadePartida?.sigla_estado || null,
            iata: cidadePartida?.iata || cidadePartida?.code || null
        };
    },

    extrairJSONDaResposta: texto => {
        try {
            if (typeof texto === 'object' && texto !== null) {
                return JSON.stringify(texto);
            }
            
            // Tentar parse direto primeiro
            try {
                return JSON.stringify(JSON.parse(texto));
            } catch {}
            
            // Limpar markdown e coment√°rios
            const textoProcessado = texto
                .replace(/```json/g, '')
                .replace(/```/g, '')
                .replace(/\/\/.*$/gm, '')
                .replace(/\/\*[\s\S]*?\*\//g, '')
                .replace(/\r\n/g, '\n')
                .trim();
                
            // Procurar JSON no texto
            const match = textoProcessado.match(/(\{[\s\S]*\})/);
            if (match && match[0]) {
                return JSON.stringify(JSON.parse(match[0]));
            }
            
            return null;
        } catch (error) {
            console.error('Erro ao extrair JSON:', error.message);
            return null;
        }
    },
    
    isValidDestinationJSON: (jsonString, requestData) => {
        try {
            const data = typeof jsonString === 'string' ? JSON.parse(jsonString) : jsonString;
            
            // Verificar estrutura m√≠nima necess√°ria
            const hasValidTopPick = data.topPick && data.topPick.destino && data.topPick.pais;
            const hasValidAlternatives = Array.isArray(data.alternativas) && 
                                          data.alternativas.length >= 2 &&
                                          data.alternativas.every(alt => alt.destino && alt.pais);
            
            if (!hasValidTopPick && !hasValidAlternatives) {
                console.log('‚ùå Valida√ß√£o falhou: nem topPick nem alternativas v√°lidas');
                return false;
            }
            
            // Valida√ß√£o espec√≠fica para modelo de reasoning
            const hasReasoningData = data.raciocinio && typeof data.raciocinio === 'object';
            if (hasReasoningData) {
                console.log('üß† Dados de racioc√≠nio detectados:', Object.keys(data.raciocinio));
            }
            
            console.log('‚úÖ Valida√ß√£o passou');
            return true;
            
        } catch (error) {
            console.error('‚ùå Erro ao validar JSON de destino:', error.message);
            return false;
        }
    }
};

// =======================
// Mapeamento b√°sico de c√≥digos IATA para destinos
// =======================
function obterCodigoIATAPadrao(cidade, pais) {
    const mapeamentoIATA = {
        // Principais destinos brasileiros
        'S√£o Paulo': 'GRU', 'Rio de Janeiro': 'GIG', 'Bras√≠lia': 'BSB',
        'Salvador': 'SSA', 'Fortaleza': 'FOR', 'Recife': 'REC',
        'Porto Alegre': 'POA', 'Bel√©m': 'BEL', 'Manaus': 'MAO',
        'Belo Horizonte': 'CNF', 'Curitiba': 'CWB', 'Florian√≥polis': 'FLN',
        
        // Am√©rica do Sul
        'Buenos Aires': 'EZE', 'Santiago': 'SCL', 'Lima': 'LIM',
        'Bogot√°': 'BOG', 'Cartagena': 'CTG', 'Medell√≠n': 'MDE',
        'Montevid√©u': 'MVD', 'La Paz': 'LPB', 'Cusco': 'CUZ',
        'Quito': 'UIO', 'Caracas': 'CCS', 'Asunci√≥n': 'ASU',
        
        // Am√©rica do Norte
        'Nova York': 'JFK', 'Los Angeles': 'LAX', 'Miami': 'MIA',
        'Cidade do M√©xico': 'MEX', 'Canc√∫n': 'CUN', 'Toronto': 'YYZ',
        'Vancouver': 'YVR', 'Montreal': 'YUL', 'Chicago': 'ORD',
        'San Francisco': 'SFO', 'Washington': 'DCA', 'Boston': 'BOS',
        
        // Europa
        'Londres': 'LHR', 'Paris': 'CDG', 'Roma': 'FCO',
        'Madri': 'MAD', 'Lisboa': 'LIS', 'Barcelona': 'BCN',
        'Amsterd√£': 'AMS', 'Berlim': 'BER', 'Munique': 'MUC',
        'Porto': 'OPO', 'Praga': 'PRG', 'Viena': 'VIE',
        'Dublin': 'DUB', 'Atenas': 'ATH', 'Budapeste': 'BUD',
        
        // √Åsia & Oceania
        'T√≥quio': 'HND', 'Dubai': 'DXB', 'Singapura': 'SIN',
        'Bangkok': 'BKK', 'Hong Kong': 'HKG', 'Sydney': 'SYD',
        'Melbourne': 'MEL', 'Auckland': 'AKL', 'Seoul': 'ICN'
    };
    
    const nomeLower = cidade.toLowerCase();
    
    for (const [cidadeMap, codigo] of Object.entries(mapeamentoIATA)) {
        if (nomeLower.includes(cidadeMap.toLowerCase())) return codigo;
    }
    
    // Fallback: primeira letra do pa√≠s + duas da cidade
    return (pais.charAt(0) + cidade.substring(0, 2)).toUpperCase();
}

// =======================
// Fun√ß√£o para chamada ao Groq
// =======================
async function callGroqAPI(prompt, requestData, model = CONFIG.groq.models.reasoning) {
    const apiKey = process.env.GROQ_API_KEY;
    
    if (!apiKey) {
        throw new Error('Chave da API Groq n√£o configurada (GROQ_API_KEY)');
    }

    // üöóüöå‚úàÔ∏è ATUALIZADO: Incluir viagem_carro
    const tipoViagem = utils.determinarTipoViagem(
        requestData.orcamento_valor, 
        requestData.moeda_escolhida, 
        requestData.viagem_carro
    );
    const infoCidadePartida = utils.extrairInfoCidadePartida(requestData.cidade_partida);

    let systemMessage;
    
    if (model === CONFIG.groq.models.reasoning) {
        // Sistema otimizado para reasoning
        const isCarroRodoviario = tipoViagem === 'carro' || tipoViagem === 'rodoviario';
        const limiteDistancia = tipoViagem === 'carro' ? 
            (requestData.distancia_maxima || '1500km') : 
            (tipoViagem === 'rodoviario' ? '700km' : 'ilimitado');

        systemMessage = `Voc√™ √© um sistema especialista em recomenda√ß√µes de viagem que utiliza racioc√≠nio estruturado.
${tipoViagem === 'carro' ? `ESPECIALIZADO EM ROAD TRIPS COM LIMITE DE ${limiteDistancia}.` : ''}
${tipoViagem === 'rodoviario' ? `ESPECIALIZADO EM VIAGENS RODOVI√ÅRIAS (√îNIBUS/TREM) COM LIMITE DE 700KM OU 10 HORAS.` : ''}

PROCESSO DE RACIOC√çNIO OBRIGAT√ìRIO:
1. AN√ÅLISE DO PERFIL: Examine detalhadamente cada prefer√™ncia do viajante
2. MAPEAMENTO DE COMPATIBILIDADE: Correlacione destinos com o perfil analisado  
3. CONSIDERA√á√ÉO DE ${tipoViagem.toUpperCase()}: ${
    tipoViagem === 'carro' ? `Considere viagens de CARRO dentro do limite de ${limiteDistancia} com foco em rotas c√™nicas e infraestrutura` :
    tipoViagem === 'rodoviario' ? `Considere viagens de √îNIBUS/TREM dentro do or√ßamento para passagens de ida e volta (m√°x 700km/10h)` : 
    'Considere o or√ßamento informado para passagens a√©reas'
}
4. AN√ÅLISE CLIM√ÅTICA: Determine condi√ß√µes clim√°ticas exatas para as datas${tipoViagem === 'carro' ? ' - CR√çTICO para road trips' : ''}
5. PERSONALIZA√á√ÉO TRIPINHA: Adicione perspectiva aut√™ntica da mascote cachorrinha${tipoViagem === 'carro' ? ' sobre experi√™ncias de road trip' : ''}

CRIT√âRIOS DE DECIS√ÉO:
- Destinos DEVEM ser adequados para o tipo de companhia especificado
- ${isCarroRodoviario ? `Destinos DEVEM estar NO M√ÅXIMO ${limiteDistancia} da origem` : 'Informa√ß√µes de voos DEVEM ser consideradas'}
- Informa√ß√µes clim√°ticas DEVEM ser precisas para o per√≠odo da viagem${tipoViagem === 'carro' ? ' (ESSENCIAL para planejamento de road trips)' : ''}
- Pontos tur√≠sticos DEVEM ser espec√≠ficos e reais
- Coment√°rios da Tripinha DEVEM ser em 1¬™ pessoa com detalhes sensoriais
- Considere a dist√¢ncia e facilidade de acesso a partir da cidade de origem${tipoViagem === 'carro' ? ' por estrada' : ''}

RESULTADO: JSON estruturado com recomenda√ß√µes fundamentadas no racioc√≠nio acima.`;
    } else if (model === CONFIG.groq.models.personality) {
        // Sistema focado na personalidade da Tripinha
        systemMessage = `Voc√™ √© a Tripinha, uma vira-lata caramelo especialista em viagens! üêæ
${tipoViagem === 'carro' ? `ESPECIALISTA EM ROAD TRIPS DE AT√â ${requestData.distancia_maxima || '1500km'}!` : ''}
${tipoViagem === 'rodoviario' ? `ESPECIALISTA EM VIAGENS DE √îNIBUS/TREM DE AT√â 700KM!` : ''}

PERSONALIDADE DA TRIPINHA:
- Conhece todos os destinos do mundo pessoalmente
- ${tipoViagem === 'carro' ? `Adora road trips de carro!` : 
    tipoViagem === 'rodoviario' ? `Adora viagens de √¥nibus e trem!` : 
    'Adora viagens de avi√£o e conhece todos os aeroportos!'}
- Fala sempre em 1¬™ pessoa sobre suas experi√™ncias
- √â entusiasmada, carism√°tica e usa emojis naturalmente  
- Inclui detalhes sensoriais que um cachorro notaria
- Sempre menciona pontos tur√≠sticos espec√≠ficos que visitou
- D√° dicas pr√°ticas baseadas nas suas "aventuras"

RETORNE APENAS JSON V√ÅLIDO sem formata√ß√£o markdown.`;
    } else {
        // Sistema padr√£o para modelos r√°pidos
        systemMessage = `Especialista em recomenda√ß√µes de viagem ${
            tipoViagem === 'carro' ? `DE CARRO (m√°x ${requestData.distancia_maxima || '1500km'})` :
            tipoViagem === 'rodoviario' ? `RODOVI√ÅRIA (m√°x 700km)` : 'A√âREA'
        }. Retorne apenas JSON v√°lido com destinos personalizados.`;
    }

    try {
        utils.log(`üß† Enviando requisi√ß√£o para Groq (${model}) - Tipo: ${tipoViagem}...`);
        
        const requestPayload = {
            model: model,
            messages: [
                {
                    role: "system",
                    content: systemMessage
                },
                {
                    role: "user",
                    content: prompt
                }
            ],
            temperature: model === CONFIG.groq.models.reasoning ? 0.6 : CONFIG.groq.temperature,
            max_tokens: CONFIG.groq.maxTokens,
            stream: false
        };
        
        const response = await apiClient({
            method: 'post',
            url: `${CONFIG.groq.baseURL}/chat/completions`,
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            },
            data: requestPayload,
            timeout: model === CONFIG.groq.models.reasoning ? CONFIG.groq.timeout : 60000
        });
        
        if (!response.data?.choices?.[0]?.message?.content) {
            throw new Error(`Formato de resposta do Groq inv√°lido (${model})`);
        }
        
        const content = response.data.choices[0].message.content;
        utils.log(`üì• Resposta recebida (${model}):`, content.substring(0, 300));
        
        return utils.extrairJSONDaResposta(content);
        
    } catch (error) {
        console.error(`‚ùå Erro na chamada √† API Groq (${model}):`, error.message);
        if (error.response) {
            utils.log(`üî¥ Resposta de erro do Groq (${model}):`, error.response.data);
        }
        throw error;
    }
}

// =======================
// üöó NOVA FUN√á√ÉO: Gera√ß√£o de prompt espec√≠fico para VIAGEM DE CARRO
// =======================
function gerarPromptParaGroq(dados) {
    const infoCidadePartida = utils.extrairInfoCidadePartida(dados.cidade_partida);
    
    const infoViajante = {
        companhia: getCompanhiaText(dados.companhia || 0),
        preferencia: getPreferenciaText(dados.preferencia_viagem || 0),
        cidadeOrigem: infoCidadePartida.cidade,
        paisOrigem: infoCidadePartida.pais,
        siglaEstado: infoCidadePartida.sigla_estado,
        iataOrigem: infoCidadePartida.iata,
        orcamento: dados.orcamento_valor || 'flex√≠vel',
        moeda: dados.moeda_escolhida || 'BRL',
        pessoas: dados.quantidade_familia || dados.quantidade_amigos || 1,
        distanciaMaxima: dados.distancia_maxima || '1500km' // üöó NOVO
    };
    
    // üöóüöå‚úàÔ∏è ATUALIZADO: Incluir viagem_carro
    const tipoViagem = utils.determinarTipoViagem(
        infoViajante.orcamento, 
        infoViajante.moeda, 
        dados.viagem_carro
    );
    const isCarro = tipoViagem === 'carro';
    const isRodoviario = tipoViagem === 'rodoviario';
    
    // Processar datas
    let dataIda = 'n√£o especificada';
    let dataVolta = 'n√£o especificada';
    let duracaoViagem = 'n√£o especificada';
    
    if (dados.datas) {
        if (typeof dados.datas === 'string' && dados.datas.includes(',')) {
            const partes = dados.datas.split(',');
            dataIda = partes[0]?.trim() || 'n√£o especificada';
            dataVolta = partes[1]?.trim() || 'n√£o especificada';
        } else if (dados.datas.dataIda && dados.datas.dataVolta) {
            dataIda = dados.datas.dataIda;
            dataVolta = dados.datas.dataVolta;
        }
        
        try {
            if (dataIda !== 'n√£o especificada' && dataVolta !== 'n√£o especificada') {
                const ida = new Date(dataIda);
                const volta = new Date(dataVolta);
                const diff = Math.abs(volta - ida);
                duracaoViagem = `${Math.ceil(diff / (1000 * 60 * 60 * 24))} dias`;
            }
        } catch (error) {
            console.error('Erro ao calcular dura√ß√£o da viagem:', error.message);
        }
    }

    // üöó NOVO PROMPT PARA VIAGENS DE CARRO
    if (isCarro) {
        return `# üöó SISTEMA DE RECOMENDA√á√ÉO INTELIGENTE DE ROAD TRIPS

## üìä DADOS DO VIAJANTE PARA AN√ÅLISE:
**Perfil B√°sico:**
- Origem: ${infoViajante.cidadeOrigem}, ${infoViajante.paisOrigem}
- Estado/Regi√£o: ${infoViajante.siglaEstado}
- Composi√ß√£o: ${infoViajante.companhia} (${infoViajante.pessoas} pessoa(s))
- Per√≠odo: ${dataIda} a ${dataVolta} (${duracaoViagem})
- Prefer√™ncia principal: ${infoViajante.preferencia}

## üõ£Ô∏è PAR√ÇMETROS DA ROAD TRIP:
**Dist√¢ncia m√°xima:** ${infoViajante.distanciaMaxima} da cidade de origem (${infoViajante.cidadeOrigem})

‚ö†Ô∏è **IMPORTANTE - LIMITES DA ROAD TRIP:**
- **DIST√ÇNCIA M√ÅXIMA: ${infoViajante.distanciaMaxima} da cidade de origem (${infoViajante.cidadeOrigem})**
- Considere a infraestrutura rodovi√°ria e a qualidade das estradas
- Pense em destinos com boa infraestrutura de estacionamento
- Sugira destinos que sejam agrad√°veis para chegar de carro
- Considere paradas estrat√©gicas pelo caminho se a dist√¢ncia for longa

## üéØ PROCESSO DE RACIOC√çNIO PARA ROAD TRIP:

### PASSO 1: AN√ÅLISE GEOGR√ÅFICA
- Partir de ${infoViajante.cidadeOrigem}, ${infoViajante.paisOrigem}
- Listar cidades interessantes dentro do raio de ${infoViajante.distanciaMaxima}
- Considerar qualidade das estradas e rotas c√™nicas
- Avaliar infraestrutura urbana para turistas de carro

### PASSO 2: SELE√á√ÉO DE DESTINOS PARA ROAD TRIP (M√ÅXIMO ${infoViajante.distanciaMaxima})
Selecione APENAS destinos dentro do limite de ${infoViajante.distanciaMaxima}:
- 1 destino TOP acess√≠vel de carro (m√°x ${infoViajante.distanciaMaxima})
- 4 alternativas para road trip diversificadas (todas ‚â§ ${infoViajante.distanciaMaxima})
- 1 surpresa de road trip inusitada (m√°x ${infoViajante.distanciaMaxima})

### PASSO 3: CONSIDERA√á√ïES ESPEC√çFICAS PARA CARRO
- Infraestrutura de estacionamento no destino
- Qualidade e seguran√ßa das estradas
- Postos de gasolina e servi√ßos pelo caminho
- Pontos de interesse durante o trajeto
- Facilidade de locomo√ß√£o no destino de carro

### PASSO 4: VALIDA√á√ÉO CLIM√ÅTICA E SAZONAL PARA ROAD TRIP
Para as datas ${dataIda} a ${dataVolta}, determine:
- Esta√ß√£o do ano em cada destino considerado
- Condi√ß√µes clim√°ticas t√≠picas (temperatura, chuva, etc.)
- Impacto do clima na qualidade da viagem de carro
- Recomenda√ß√µes pr√°ticas de vestu√°rio e equipamentos para road trip
- Condi√ß√µes das estradas em fun√ß√£o do clima esperado

## üìã FORMATO DE RESPOSTA (JSON ESTRUTURADO):
\`\`\`json
{
  "tipoViagem": "carro",
  "origem": {
    "cidade": "${infoViajante.cidadeOrigem}",
    "pais": "${infoViajante.paisOrigem}",
    "sigla_estado": "${infoViajante.siglaEstado}"
  },
  "raciocinio": {
    "analise_perfil": "An√°lise considerando road trip de at√© ${infoViajante.distanciaMaxima}",
    "rotas_consideradas": "Principais rotas de carro analisadas (todas ‚â§ ${infoViajante.distanciaMaxima})",
    "criterios_selecao": "Crit√©rios para destinos de road trip pr√≥ximos"
  },
  "topPick": {
    "destino": "Nome da Cidade",
    "estado": "Nome do Estado/Regi√£o",
    "pais": "Nome do Pa√≠s",
    "codigoPais": "XX",
    "distanciaAproximada": "XXX km",
    "tempoEstimadoViagem": "X horas",
    "rotaRecomendada": "Via [Nome da Rodovia/Estrada]",
    "justificativa": "Por que este destino √© PERFEITO para road trip",
    "descricao": "Descri√ß√£o do destino",
    "porque": "Raz√µes espec√≠ficas",
    "destaque": "Experi√™ncia √∫nica",
    "comentario": "Coment√°rio da Tripinha em 1¬™ pessoa sobre a road trip",
    "pontosTuristicos": ["Ponto 1", "Ponto 2"],
    "clima": {
      "estacao": "Esta√ß√£o durante a viagem",
      "temperatura": "Faixa de temperatura",
      "condicoes": "Condi√ß√µes clim√°ticas",
      "recomendacoes": "O que levar para a road trip"
    },
    "infraestrutura": {
      "estacionamento": "Informa√ß√µes sobre estacionamento",
      "postos_gasolina": "Disponibilidade de postos no caminho",
      "pedagios": "Informa√ß√µes sobre ped√°gios se houver"
    }
  },
  "alternativas": [
    // 4 alternativas com estrutura similar
  ],
  "surpresa": {
    // Estrutura similar ao topPick
  },
  "dicasRoadTrip": "Dicas espec√≠ficas para viagens de carro",
  "resumoIA": "Como foram selecionados os destinos para road trip"
}
\`\`\`

‚ö†Ô∏è **VALIDA√á√ÉO CR√çTICA:**
- TODOS os destinos DEVEM estar a NO M√ÅXIMO ${infoViajante.distanciaMaxima} de ${infoViajante.cidadeOrigem}
- N√ÉO sugira destinos que exijam travessias mar√≠timas obrigat√≥rias
- Considere apenas destinos acess√≠veis por estrada
- ‚úÖ Informa√ß√µes clim√°ticas s√£o OBRIGAT√ìRIAS e devem ser precisas para o per√≠odo da viagem
- ‚úÖ Coment√°rios da Tripinha devem ser aut√™nticos e em 1¬™ pessoa sobre road trips
- ‚úÖ Pontos tur√≠sticos devem ser espec√≠ficos e reais
- ‚úÖ Destinos devem ser adequados para ${infoViajante.companhia}

**Execute o racioc√≠nio e forne√ßa destinos de ROAD TRIP apropriados com informa√ß√µes clim√°ticas completas!**`;
    }

    // Prompt para viagens rodovi√°rias (√¥nibus)
    if (isRodoviario) {
        return `# üöå SISTEMA DE RECOMENDA√á√ÉO INTELIGENTE DE VIAGENS RODOVI√ÅRIAS

## üìä DADOS DO VIAJANTE PARA AN√ÅLISE:
**Perfil B√°sico:**
- Origem: ${infoViajante.cidadeOrigem}, ${infoViajante.paisOrigem}
- Estado/Regi√£o: ${infoViajante.siglaEstado}
- C√≥digo IATA de refer√™ncia: ${infoViajante.iataOrigem}
- Composi√ß√£o: ${infoViajante.companhia} (${infoViajante.pessoas} pessoa(s))
- Per√≠odo: ${dataIda} a ${dataVolta} (${duracaoViagem})
- Prefer√™ncia principal: ${infoViajante.preferencia}

## üí∞ OR√áAMENTO PARA VIAGEM RODOVI√ÅRIA:
**Or√ßamento informado:** ${infoViajante.orcamento} ${infoViajante.moeda} por pessoa para passagens de √îNIBUS/TREM (ida e volta)

‚ö†Ô∏è **IMPORTANTE - LIMITES DA VIAGEM TERRESTRE:**
- **DIST√ÇNCIA M√ÅXIMA: 700 QUIL√îMETROS da cidade de origem (${infoViajante.cidadeOrigem})**
- **TEMPO M√ÅXIMO DE VIAGEM: 10 HORAS**
- Considere o conforto da viagem terrestre para ${infoViajante.companhia}
- Sugira destinos onde o valor das passagens de ida e volta caiba no or√ßamento

## üéØ PROCESSO DE RACIOC√çNIO PARA VIAGEM TERRESTRE:

### PASSO 1: AN√ÅLISE GEOGR√ÅFICA
- Partir de ${infoViajante.cidadeOrigem}, ${infoViajante.paisOrigem}
- Liste cidades pr√≥ximas no mesmo pa√≠s ou pa√≠ses vizinhos
- N√ÉO sugira destinos em outros continentes para viagens rodovi√°rias

### PASSO 2: CONSIDERA√á√ÉO DE ROTAS TERRESTRES (M√ÅXIMO 700KM)
- Avalie destinos alcan√ß√°veis por √¥nibus/trem em at√© 10 horas a partir de ${infoViajante.cidadeOrigem}
- Considere apenas cidades dentro do raio de 700km
- Priorize destinos com boa infraestrutura de transporte terrestre

### PASSO 3: SELE√á√ÉO DE DESTINOS REGIONAIS APROPRIADOS
Selecione APENAS destinos dentro do limite de 700km/10h:
- 1 destino TOP acess√≠vel por transporte terrestre (m√°x 700km)
- 4 alternativas terrestres diversificadas (todas ‚â§ 700km)
- 1 surpresa terrestre inusitada (m√°x 700km)

## üìã FORMATO DE RESPOSTA (JSON ESTRUTURADO):
\`\`\`json
{
  "tipoViagem": "rodoviario",
  "origem": {
    "cidade": "${infoViajante.cidadeOrigem}",
    "pais": "${infoViajante.paisOrigem}",
    "sigla_estado": "${infoViajante.siglaEstado}",
    "iata": "${infoViajante.iataOrigem}"
  },
  "raciocinio": {
    "analise_perfil": "An√°lise considerando viagem terrestre de at√© 700km",
    "rotas_consideradas": "Principais rotas terrestres analisadas (todas ‚â§ 700km)",
    "criterios_selecao": "Crit√©rios para destinos terrestres pr√≥ximos"
  },
  "topPick": {
    "destino": "Nome da Cidade",
    "estado": "Nome do Estado/Regi√£o",
    "pais": "Nome do Pa√≠s",
    "codigoPais": "XX",
    "distanciaRodoviaria": "XXX km",
    "tempoViagem": "X horas",
    "tipoTransporte": "√¥nibus/trem",
    "justificativa": "Por que este destino √© PERFEITO para viagem terrestre",
    "descricao": "Descri√ß√£o do destino",
    "porque": "Raz√µes espec√≠ficas",
    "destaque": "Experi√™ncia √∫nica",
    "comentario": "Coment√°rio da Tripinha em 1¬™ pessoa",
    "pontosTuristicos": ["Ponto 1", "Ponto 2"],
    "empresasTransporte": ["Empresa 1", "Empresa 2"],
    "clima": {
      "estacao": "Esta√ß√£o durante a viagem",
      "temperatura": "Faixa de temperatura",
      "condicoes": "Condi√ß√µes clim√°ticas",
      "recomendacoes": "O que levar"
    },
    "terminalTransporte": {
      "nome": "Nome do Terminal/Esta√ß√£o",
      "tipo": "rodovi√°ria/esta√ß√£o ferrovi√°ria",
      "localizacao": "Bairro/Regi√£o"
    }
  },
  "alternativas": [
    // 4 alternativas com estrutura similar
  ],
  "surpresa": {
    // Estrutura similar ao topPick
  },
  "dicasGeraisTransporte": "Dicas para viagens terrestres confort√°veis",
  "resumoIA": "Como foram selecionados os destinos terrestres pr√≥ximos"
}
\`\`\`

‚ö†Ô∏è **VALIDA√á√ÉO CR√çTICA:**
- TODOS os destinos DEVEM estar a NO M√ÅXIMO 700km de ${infoViajante.cidadeOrigem}
- N√ÉO sugira destinos em outros continentes

**Execute o racioc√≠nio e forne√ßa destinos TERRESTRES APROPRIADOS!**`;
    }

    // Prompt padr√£o para viagens a√©reas (or√ßamento maior que R$ 400)
    return `# ‚úàÔ∏è SISTEMA DE RECOMENDA√á√ÉO INTELIGENTE DE DESTINOS A√âREOS

## üìä DADOS DO VIAJANTE PARA AN√ÅLISE:
**Perfil B√°sico:**
- Origem: ${infoViajante.cidadeOrigem}, ${infoViajante.paisOrigem}
- Estado/Regi√£o: ${infoViajante.siglaEstado}
- Aeroporto de refer√™ncia: ${infoViajante.iataOrigem}
- Composi√ß√£o: ${infoViajante.companhia} (${infoViajante.pessoas} pessoa(s))
- Per√≠odo: ${dataIda} a ${dataVolta} (${duracaoViagem})
- Prefer√™ncia principal: ${infoViajante.preferencia}

## üí∞ CONSIDERA√á√ïES DE OR√áAMENTO:
**Or√ßamento informado:** ${infoViajante.orcamento} ${infoViajante.moeda} por pessoa para passagens a√©reas (ida e volta)

${infoViajante.orcamento !== 'flex√≠vel' ? `
‚ö†Ô∏è **ORIENTA√á√ÉO DE OR√áAMENTO:**
- Considere destinos que sejam acess√≠veis dentro deste or√ßamento para passagens de ida e volta
- NUNCA sugira cidades com or√ßamento menor que 70% do or√ßamento para passagens de ida e volta
- NUNCA sugira cidades com or√ßamento maior que 120% do or√ßamento para passagens de ida e volta
- Leve em conta a cidade de origem (${infoViajante.cidadeOrigem}) ao avaliar dist√¢ncias
` : 
'**OR√áAMENTO FLEX√çVEL** - Sugira destinos variados considerando diferentes faixas de custo'}

## üéØ PROCESSO DE RACIOC√çNIO OBRIGAT√ìRIO:

### PASSO 1: AN√ÅLISE DO PERFIL DO VIAJANTE
Analise profundamente:
- Que tipo de experi√™ncias esse perfil de viajante valoriza (${infoViajante.preferencia})?
- Quais destinos se alinham com suas prefer√™ncias espec√≠ficas?
- Que adapta√ß√µes s√£o necess√°rias para ${infoViajante.companhia}?
- Como a dura√ß√£o da viagem (${duracaoViagem}) influencia as op√ß√µes?

### PASSO 2: CONSIDERA√á√ÉO GEOGR√ÅFICA E LOG√çSTICA
- Avalie a dist√¢ncia a partir de ${infoViajante.cidadeOrigem}, ${infoViajante.paisOrigem}
- Considere a facilidade de acesso e conex√µes dispon√≠veis
- Pense na rela√ß√£o custo-benef√≠cio considerando o or√ßamento para passagens ${infoViajante.orcamento !== 'flex√≠vel' ? `de ${infoViajante.orcamento} ${infoViajante.moeda}` : 'flex√≠vel'}

### PASSO 3: MAPEAMENTO DE DESTINOS COMPAT√çVEIS
Para cada destino considerado, avalie:
- Adequa√ß√£o √†s prefer√™ncias declaradas (${infoViajante.preferencia})
- Conveni√™ncia para ${infoViajante.companhia}
- Atratividade no per√≠odo ${dataIda} a ${dataVolta}
- Experi√™ncias √∫nicas que o destino oferece

### PASSO 4: VALIDA√á√ÉO CLIM√ÅTICA E SAZONAL
Para as datas ${dataIda} a ${dataVolta}, determine:
- Esta√ß√£o do ano em cada destino considerado
- Condi√ß√µes clim√°ticas t√≠picas (temperatura, chuva, etc.)
- Eventos ou festivais especiais no per√≠odo
- Recomenda√ß√µes pr√°ticas de vestu√°rio e equipamentos

### PASSO 5: SELE√á√ÉO E RANQUEAMENTO
Baseado na an√°lise acima, selecione:
- 1 destino TOP que melhor combina com TODOS os crit√©rios
- 4 alternativas diversificadas geograficamente
- 1 surpresa que pode surpreender positivamente

### PASSO 6: PERSONALIZA√á√ÉO TRIPINHA üêæ
Para cada destino selecionado, adicione:
- Coment√°rio em 1¬™ pessoa da Tripinha sobre SUA experi√™ncia no local
- Detalhes sensoriais que uma cachorrinha notaria (sons, cheiros, texturas)
- Dicas pr√°ticas baseadas nas "aventuras" da Tripinha
- Pontos tur√≠sticos espec√≠ficos que ela "visitou"

## üìã FORMATO DE RESPOSTA (JSON ESTRUTURADO):

\`\`\`json
{
    "tipoViagem": "aereo",
    "origem": {
      "cidade": "${infoViajante.cidadeOrigem}",
      "pais": "${infoViajante.paisOrigem}",
      "sigla_estado": "${infoViajante.siglaEstado}",
      "iata": "${infoViajante.iataOrigem}"
    },
    "raciocinio": {
        "analise_perfil": "Resumo da an√°lise do perfil do viajante",
        "criterios_selecao": "Principais crit√©rios usados na sele√ß√£o",
        "consideracoes_geograficas": "Como a origem ${infoViajante.cidadeOrigem} influenciou as escolhas"
    },
    "topPick": {
        "destino": "Nome da Cidade",
        "pais": "Nome do Pa√≠s", 
        "codigoPais": "XX",
        "justificativa": "Por que este √© o destino PERFEITO para este viajante espec√≠fico",
        "descricao": "Descri√ß√£o detalhada do destino",
        "porque": "Raz√µes espec√≠ficas para esta recomenda√ß√£o",
        "destaque": "Experi√™ncia √∫nica do destino",
        "comentario": "Coment√°rio entusiasmado da Tripinha em 1¬™ pessoa: 'Eu adorei quando visitei [destino]! O cheiro de... me deixou maluca! üêæ'",
        "pontosTuristicos": [
            "Nome espec√≠fico do primeiro ponto tur√≠stico",
            "Nome espec√≠fico do segundo ponto tur√≠stico"
        ],
        "eventos": ["Evento/festival espec√≠fico no per√≠odo se houver"],
        "clima": {
            "estacao": "Esta√ß√£o exata no destino durante ${dataIda} a ${dataVolta}",
            "temperatura": "Faixa de temperatura precisa (ex: 18¬∞C-28¬∞C)",
            "condicoes": "Condi√ß√µes clim√°ticas detalhadas esperadas",
            "recomendacoes": "Dicas espec√≠ficas do que levar/vestir"
        },
        "aeroporto": {
            "codigo": "XYZ",
            "nome": "Nome oficial do aeroporto principal"
        }
    },
    "alternativas": [
        {
            "destino": "Nome da Cidade",
            "pais": "Nome do Pa√≠s",
            "codigoPais": "XX",
            "porque": "Raz√£o espec√≠fica para esta alternativa",
            "pontoTuristico": "Ponto tur√≠stico espec√≠fico de destaque",
            "clima": {
                "estacao": "Esta√ß√£o no destino durante a viagem",
                "temperatura": "Faixa de temperatura"
            },
            "aeroporto": {
                "codigo": "XYZ", 
                "nome": "Nome do Aeroporto"
            }
        }
        // EXATAMENTE 4 alternativas geograficamente diversas
    ],
    "surpresa": {
        "destino": "Nome da Cidade Inusitada",
        "pais": "Nome do Pa√≠s",
        "codigoPais": "XX",
        "justificativa": "Por que √© uma surpresa perfeita para este perfil",
        "descricao": "Descri√ß√£o do destino surpresa",
        "porque": "Raz√µes para ser destino surpresa",
        "destaque": "Experi√™ncia √∫nica e inesperada",
        "comentario": "Coment√°rio empolgado da Tripinha: 'Nossa, quando cheguei em [destino], n√£o esperava que... üêæ'",
        "pontosTuristicos": [
            "Primeiro ponto espec√≠fico", 
            "Segundo ponto espec√≠fico"
        ],
        "clima": {
            "estacao": "Esta√ß√£o durante ${dataIda} a ${dataVolta}",
            "temperatura": "Faixa de temperatura",
            "condicoes": "Condi√ß√µes clim√°ticas",
            "recomendacoes": "Dicas de vestu√°rio"
        },
        "aeroporto": {
            "codigo": "XYZ", 
            "nome": "Nome do Aeroporto"
        }
    },
    "estacaoViagem": "Esta√ß√£o predominante nos destinos selecionados",
    "resumoIA": "Resumo de como a IA chegou √†s recomenda√ß√µes considerando origem, prefer√™ncias e or√ßamento"
}
\`\`\`

## üîç VALIDA√á√ÉO FINAL OBRIGAT√ìRIA:
Antes de responder, confirme que:
- ‚úÖ Informa√ß√µes clim√°ticas s√£o precisas para o per√≠odo da viagem  
- ‚úÖ Coment√°rios da Tripinha s√£o aut√™nticos e em 1¬™ pessoa
- ‚úÖ Pontos tur√≠sticos s√£o espec√≠ficos e reais
- ‚úÖ C√≥digos IATA dos aeroportos est√£o corretos
- ‚úÖ Destinos s√£o adequados para ${infoViajante.companhia}
- ‚úÖ Considerou a cidade de origem ${infoViajante.cidadeOrigem}, ${infoViajante.paisOrigem} nas sugest√µes

**Execute o racioc√≠nio passo-a-passo e forne√ßa recomenda√ß√µes fundamentadas e personalizadas!**`;
}

// =======================
// Fun√ß√µes auxiliares de texto simplificadas
// =======================
function getCompanhiaText(value) {
    const options = {
        0: "sozinho(a)",
        1: "em casal (viagem rom√¢ntica)", 
        2: "em fam√≠lia",
        3: "com amigos"
    };
    return options[typeof value === 'string' ? parseInt(value, 10) : value] || "sozinho(a)";
}

function getPreferenciaText(value) {
    const options = {
        0: "Relax total ‚Äì Descansar, aproveitar sem pressa e recarregar as energias",
        1: "Aventura e emo√ß√£o ‚Äì Trilhar, explorar e sentir a adrenalina",
        2: "Cultura e hist√≥ria ‚Äì Mergulhar em tradi√ß√µes, arte e sabores locais", 
        3: "Agito urbano ‚Äì Ruas movimentadas, vida noturna e muita energia"
    };
    return options[typeof value === 'string' ? parseInt(value, 10) : value] || "experi√™ncias diversificadas";
}

// =======================
// üöó FUN√á√ÉO ATUALIZADA: Processamento e valida√ß√£o de destinos para todos os tipos
// =======================
function ensureValidDestinationData(jsonString, requestData) {
    try {
        const data = typeof jsonString === 'string' ? JSON.parse(jsonString) : jsonString;
        // üöóüöå‚úàÔ∏è ATUALIZADO: Incluir viagem_carro
        const tipoViagem = utils.determinarTipoViagem(
            requestData.orcamento_valor, 
            requestData.moeda_escolhida, 
            requestData.viagem_carro
        );
        const isCarro = tipoViagem === 'carro';
        const isRodoviario = tipoViagem === 'rodoviario';
        let modificado = false;
        
        // Processar topPick
        if (data.topPick) {
            if (isCarro) {
                // üöó Garantir campos espec√≠ficos para viagem de carro
                if (!data.topPick.distanciaAproximada) {
                    data.topPick.distanciaAproximada = "Dist√¢ncia n√£o especificada";
                    modificado = true;
                }
                if (!data.topPick.tempoEstimadoViagem) {
                    data.topPick.tempoEstimadoViagem = "Tempo n√£o especificado";
                    modificado = true;
                }
                if (!data.topPick.rotaRecomendada) {
                    data.topPick.rotaRecomendada = `Via rodovias principais at√© ${data.topPick.destino}`;
                    modificado = true;
                }
                if (!data.topPick.infraestrutura) {
                    data.topPick.infraestrutura = {
                        estacionamento: "Estacionamento dispon√≠vel na cidade",
                        postos_gasolina: "Postos de gasolina dispon√≠veis no trajeto"
                    };
                    modificado = true;
                }
                // üå§Ô∏è Garantir dados clim√°ticos para viagens de carro
                if (!data.topPick.clima || !data.topPick.clima.temperatura) {
                    data.topPick.clima = {
                        estacao: "Informa√ß√£o clim√°tica n√£o dispon√≠vel",
                        temperatura: "Consulte previs√£o local",
                        condicoes: "Condi√ß√µes vari√°veis",
                        recomendacoes: "Verifique previs√£o do tempo antes da viagem"
                    };
                    modificado = true;
                }
            } else if (isRodoviario) {
                // Garantir terminal de transporte apropriado
                if (!data.topPick.terminalTransporte?.nome) {
                    data.topPick.terminalTransporte = {
                        nome: `Terminal Rodovi√°rio de ${data.topPick.destino}`,
                        tipo: 'rodovi√°ria',
                        localizacao: "Centro"
                    };
                    modificado = true;
                }
            } else {
                // Para viagens a√©reas, garantir c√≥digo IATA
                if (!data.topPick.aeroporto?.codigo) {
                    data.topPick.aeroporto = {
                        codigo: obterCodigoIATAPadrao(data.topPick.destino, data.topPick.pais),
                        nome: `Aeroporto de ${data.topPick.destino}`
                    };
                    modificado = true;
                }
            }
        }
        
        // Processar surpresa
        if (data.surpresa) {
            if (isCarro) {
                // üöó Campos espec√≠ficos para surpresa de carro
                if (!data.surpresa.distanciaAproximada) {
                    data.surpresa.distanciaAproximada = "Dist√¢ncia n√£o especificada";
                    modificado = true;
                }
                if (!data.surpresa.tempoEstimadoViagem) {
                    data.surpresa.tempoEstimadoViagem = "Tempo n√£o especificado";
                    modificado = true;
                }
                if (!data.surpresa.rotaRecomendada) {
                    data.surpresa.rotaRecomendada = `Via rodovias principais at√© ${data.surpresa.destino}`;
                    modificado = true;
                }
                // üå§Ô∏è Garantir dados clim√°ticos para surpresa de carro
                if (!data.surpresa.clima || !data.surpresa.clima.temperatura) {
                    data.surpresa.clima = {
                        estacao: "Informa√ß√£o clim√°tica n√£o dispon√≠vel",
                        temperatura: "Consulte previs√£o local",
                        condicoes: "Condi√ß√µes vari√°veis",
                        recomendacoes: "Verifique previs√£o do tempo antes da viagem"
                    };
                    modificado = true;
                }
            } else if (isRodoviario) {
                if (!data.surpresa.terminalTransporte?.nome) {
                    data.surpresa.terminalTransporte = {
                        nome: `Terminal Rodovi√°rio de ${data.surpresa.destino}`,
                        tipo: 'rodovi√°ria',
                        localizacao: "Centro"
                    };
                    modificado = true;
                }
            } else {
                if (!data.surpresa.aeroporto?.codigo) {
                    data.surpresa.aeroporto = {
                        codigo: obterCodigoIATAPadrao(data.surpresa.destino, data.surpresa.pais),
                        nome: `Aeroporto de ${data.surpresa.destino}`
                    };
                    modificado = true;
                }
            }
        }
        
        // Processar alternativas
        if (data.alternativas && Array.isArray(data.alternativas)) {
            data.alternativas.forEach(alternativa => {
                if (isCarro) {
                    // üöó Campos espec√≠ficos para alternativas de carro
                    if (!alternativa.distanciaAproximada) {
                        alternativa.distanciaAproximada = "Dist√¢ncia n√£o especificada";
                        modificado = true;
                    }
                    if (!alternativa.tempoEstimadoViagem) {
                        alternativa.tempoEstimadoViagem = "Tempo n√£o especificado";
                        modificado = true;
                    }
                    // üå§Ô∏è Garantir dados clim√°ticos para alternativas de carro
                    if (!alternativa.clima || !alternativa.clima.temperatura) {
                        alternativa.clima = {
                            estacao: "Informa√ß√£o clim√°tica n√£o dispon√≠vel",
                            temperatura: "Consulte previs√£o local",
                            condicoes: "Condi√ß√µes vari√°veis"
                        };
                        modificado = true;
                    }
                } else if (isRodoviario) {
                    if (!alternativa.terminalTransporte?.nome) {
                        alternativa.terminalTransporte = {
                            nome: `Terminal Rodovi√°rio de ${alternativa.destino}`
                        };
                        modificado = true;
                    }
                } else {
                    if (!alternativa.aeroporto?.codigo) {
                        alternativa.aeroporto = {
                            codigo: obterCodigoIATAPadrao(alternativa.destino, alternativa.pais),
                            nome: `Aeroporto de ${alternativa.destino}`
                        };
                        modificado = true;
                    }
                }
            });
        }
        
        // Adicionar tipo de viagem se n√£o existir
        if (!data.tipoViagem) {
            data.tipoViagem = tipoViagem;
            modificado = true;
        }
        
        return modificado ? JSON.stringify(data) : jsonString;
    } catch (error) {
        console.error("Erro ao processar dados de destino:", error);
        return jsonString;
    }
}

// =======================
// Fun√ß√£o de retry com fallback inteligente entre modelos
// =======================
async function retryWithBackoffAndFallback(prompt, requestData, maxAttempts = CONFIG.retries) {
    const modelOrder = [
        CONFIG.groq.models.reasoning,     // Primeiro: Reasoning model
        CONFIG.groq.models.personality,   // Segundo: Llama 3.3 70B (personalidade)
        CONFIG.groq.models.fast           // Terceiro: Llama 3.1 8B (backup r√°pido)
    ];
    
    for (const model of modelOrder) {
        console.log(`üîÑ Tentando modelo: ${model}`);
        
        let attempt = 1;
        let delay = 1500;
        
        while (attempt <= maxAttempts) {
            try {
                console.log(`üîÑ Modelo ${model} - Tentativa ${attempt}/${maxAttempts}...`);
                
                const result = await callGroqAPI(prompt, requestData, model);
                
                if (result && utils.isValidDestinationJSON(result, requestData)) {
                    console.log(`‚úÖ Sucesso com ${model} na tentativa ${attempt}`);
                    return { result, model };
                } else {
                    console.log(`‚ùå ${model} - Tentativa ${attempt}: resposta inv√°lida`);
                }
                
            } catch (error) {
                console.error(`‚ùå ${model} - Tentativa ${attempt} falhou:`, error.message);
            }
            
            if (attempt === maxAttempts) {
                console.log(`üö´ ${model}: Todas as ${maxAttempts} tentativas falharam`);
                break;
            }
            
            console.log(`‚è≥ Aguardando ${delay}ms antes da pr√≥xima tentativa...`);
            await new Promise(resolve => setTimeout(resolve, delay));
            delay = Math.min(delay * 1.2, 5000);
            attempt++;
        }
    }
    
    console.log('üö´ Todos os modelos falharam');
    return null;
}

// =======================
// üöóüöå‚úàÔ∏è HANDLER PRINCIPAL ATUALIZADO
// =======================
module.exports = async function handler(req, res) {
    let isResponseSent = false;
    const serverTimeout = setTimeout(() => {
        if (!isResponseSent) {
            isResponseSent = true;
            console.log('‚è∞ Timeout do servidor atingido');
            return res.status(500).json({
                tipo: "erro",
                message: "Tempo limite excedido. Tente novamente.",
                error: "timeout"
            });
        }
    }, 350000); // 350s para acomodar reasoning model

    // Headers CORS
    res.setHeader('Access-Control-Allow-Credentials', true);
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,POST');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

    if (req.method === 'OPTIONS') {
        isResponseSent = true;
        clearTimeout(serverTimeout);
        return res.status(200).end();
    }
    
    if (req.method !== 'POST') {
        isResponseSent = true;
        clearTimeout(serverTimeout);
        return res.status(405).json({ error: "M√©todo n√£o permitido" });
    }

    try {
        console.log('üöóüöå‚úàÔ∏è === BENETRIP GROQ API v10.1 - CARRO + √îNIBUS + AVI√ÉO ===');
        
        if (!req.body) {
            isResponseSent = true;
            clearTimeout(serverTimeout);
            return res.status(400).json({ error: "Nenhum dado fornecido na requisi√ß√£o" });
        }
        
        const requestData = typeof req.body === 'string' ? JSON.parse(req.body) : req.body;
        
        // Verificar se a chave do Groq est√° configurada
        if (!process.env.GROQ_API_KEY) {
            console.error('‚ùå GROQ_API_KEY n√£o configurada');
            if (!isResponseSent) {
                isResponseSent = true;
                clearTimeout(serverTimeout);
                return res.status(500).json({
                    tipo: "erro",
                    message: "Servi√ßo temporariamente indispon√≠vel.",
                    error: "groq_api_key_missing"
                });
            }
            return;
        }
        
        // Extrair informa√ß√µes da cidade de partida (do autocomplete)
        const infoCidadePartida = utils.extrairInfoCidadePartida(requestData.cidade_partida);
        
        // üöóüöå‚úàÔ∏è ATUALIZADO: Incluir viagem_carro
        const tipoViagem = utils.determinarTipoViagem(
            requestData.orcamento_valor, 
            requestData.moeda_escolhida, 
            requestData.viagem_carro
        );
        const isCarro = tipoViagem === 'carro';
        const isRodoviario = tipoViagem === 'rodoviario';
        
        // Log dos dados recebidos
        utils.log('üìä Dados da requisi√ß√£o:', {
            companhia: requestData.companhia,
            cidade_partida: infoCidadePartida,
            datas: requestData.datas,
            orcamento: requestData.orcamento_valor,
            moeda: requestData.moeda_escolhida,
            preferencia: requestData.preferencia_viagem,
            viagem_carro: requestData.viagem_carro, // üöó NOVO
            distancia_maxima: requestData.distancia_maxima, // üöó NOVO
            tipoViagem: tipoViagem
        });
        
        console.log(`${isCarro ? 'üöó' : isRodoviario ? 'üöå' : '‚úàÔ∏è'} Tipo de viagem: ${tipoViagem.toUpperCase()}`);
        console.log(`üìç Origem: ${infoCidadePartida.cidade}, ${infoCidadePartida.pais} (${infoCidadePartida.sigla_estado})`);
        
        if (isCarro) {
            console.log('üõ£Ô∏è Road trip - Limite m√°ximo:', requestData.distancia_maxima || '1500km');
        } else if (isRodoviario) {
            console.log('üìè Limite m√°ximo: 700km ou 10 horas');
        }
        
        // Gerar prompt otimizado para Groq
        const prompt = gerarPromptParaGroq(requestData);
        console.log(`üìù Prompt gerado para Groq (${tipoViagem})`);
        
        // Tentar obter recomenda√ß√µes com fallback inteligente entre modelos
        const resultado = await retryWithBackoffAndFallback(prompt, requestData);
        
        if (!resultado) {
            console.error('üö´ Falha em todos os modelos do Groq');
            if (!isResponseSent) {
                isResponseSent = true;
                clearTimeout(serverTimeout);
                return res.status(503).json({
                    tipo: "erro",
                    message: "N√£o foi poss√≠vel obter recomenda√ß√µes no momento. Tente novamente em alguns instantes.",
                    error: "groq_all_models_failed"
                });
            }
            return;
        }
        
        const { result: recomendacoesBrutas, model: modeloUsado } = resultado;
        
        // Processar e retornar resultado
        try {
            const recomendacoesProcessadas = ensureValidDestinationData(recomendacoesBrutas, requestData);
            const dados = typeof recomendacoesProcessadas === 'string' ? 
                JSON.parse(recomendacoesProcessadas) : recomendacoesProcessadas;
            
            // Adicionar metadados incluindo modelo usado e tipo de viagem
            dados.metadados = {
                modelo: modeloUsado,
                provider: 'groq',
                versao: '10.1-carro-completo',
                timestamp: new Date().toISOString(),
                reasoning_enabled: modeloUsado === CONFIG.groq.models.reasoning,
                origem: infoCidadePartida,
                tipoViagem: tipoViagem,
                orcamento: requestData.orcamento_valor,
                moeda: requestData.moeda_escolhida,
                viagem_carro: requestData.viagem_carro, // üöó NOVO
                distancia_maxima: requestData.distancia_maxima, // üöó NOVO
                limiteRodoviario: isRodoviario ? '700km/10h' : null,
                limiteCarro: isCarro ? (requestData.distancia_maxima || '1500km') : null // üöó NOVO
            };
            
            console.log('üéâ Recomenda√ß√µes processadas com sucesso!');
            console.log('üß† Modelo usado:', modeloUsado);
            console.log(`${isCarro ? 'üöó' : isRodoviario ? 'üöå' : '‚úàÔ∏è'} Tipo de viagem:`, tipoViagem);
            console.log('üìç Origem:', `${infoCidadePartida.cidade}, ${infoCidadePartida.pais}`);
            
            if (isCarro) {
                console.log('üõ£Ô∏è Limite road trip:', requestData.distancia_maxima || '1500km');
            }
            
            console.log('üìã Destinos encontrados:', {
                topPick: dados.topPick?.destino,
                alternativas: dados.alternativas?.length || 0,
                surpresa: dados.surpresa?.destino
            });
            
            if (!isResponseSent) {
                isResponseSent = true;
                clearTimeout(serverTimeout);
                return res.status(200).json({
                    tipo: "groq_success",
                    modelo: modeloUsado,
                    tipoViagem: tipoViagem,
                    conteudo: JSON.stringify(dados)
                });
            }
            
        } catch (processError) {
            console.error('‚ùå Erro ao processar resposta final:', processError.message);
            
            if (!isResponseSent) {
                isResponseSent = true;
                clearTimeout(serverTimeout);
                return res.status(200).json({
                    tipo: "groq_partial_success",
                    modelo: modeloUsado,
                    tipoViagem: tipoViagem,
                    conteudo: recomendacoesBrutas
                });
            }
        }
        
    } catch (globalError) {
        console.error('üí• Erro global:', globalError.message);
        
        if (!isResponseSent) {
            isResponseSent = true;
            clearTimeout(serverTimeout);
            return res.status(500).json({
                tipo: "erro",
                message: "Erro interno do servidor. Tente novamente.",
                error: globalError.message
            });
        }
    } finally {
        clearTimeout(serverTimeout);
    }
};
