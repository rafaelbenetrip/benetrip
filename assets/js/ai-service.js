/**
 * Servi√ßo de IA para recomenda√ß√£o de destinos da Benetrip
 */

const BENETRIP_AI = {
    // Tentar obter a chave das vari√°veis de ambiente do Netlify
    if (process.env.OPENAI_API_KEY) {
      this.config.apiKey = process.env.OPENAI_API_KEY;
      console.log("Chave API carregada das vari√°veis de ambiente");
    }
    
    // Configura√ß√µes do servi√ßo
    config: {
        apiKey: null, // Ser√° inicializado durante setup
        cacheDuration: 24 * 60 * 60 * 1000, // 24 horas em ms
        apiEndpoint: 'https://api.openai.com/v1/chat/completions',
        model: 'gpt-4'
    },

    // Inicializa o servi√ßo de IA
    init() {
        // Obter a chave da API do m√≥dulo de configura√ß√£o
        if (window.BENETRIP_CONFIG && window.BENETRIP_CONFIG.credentials) {
            this.config.apiKey = window.BENETRIP_CONFIG.credentials.openAI;
            console.log("Servi√ßo de IA inicializado");
            
            // Verificar se a chave est√° em formato v√°lido
            if (!this.validateApiKey()) {
                console.error("Chave API inv√°lida ou em formato incorreto");
                // N√£o lance exce√ß√£o aqui, apenas registra o erro
            }
        } else {
            console.warn("BENETRIP_CONFIG n√£o encontrado");
            return this;
        }
        
        // Carrega cache existente
        this.loadCache();
        
        return this;
    },
    
    // Valida o formato b√°sico da chave API
    validateApiKey() {
        if (!this.config.apiKey) {
            return false;
        }
        
        // Verificar formato b√°sico (come√ßa com sk-)
        if (!this.config.apiKey.startsWith('sk-')) {
            return false;
        }
        
        // Verificar comprimento (deve ser suficientemente longo)
        if (this.config.apiKey.length < 20) {
            return false;
        }
        
        return true;
    },
    
    // Sistema de cache para evitar chamadas repetidas √† API
    cache: {
        recommendations: {},
        timestamp: {}
    },
    
    // Carrega cache do localStorage
    loadCache() {
        try {
            const cachedData = localStorage.getItem('benetrip_ai_cache');
            if (cachedData) {
                const parsed = JSON.parse(cachedData);
                this.cache = {...parsed};
                console.log("Cache de IA carregado com sucesso");
            }
        } catch (error) {
            console.warn("Erro ao carregar cache de IA:", error);
        }
    },
    
    // Salva cache no localStorage
    saveCache() {
        try {
            localStorage.setItem('benetrip_ai_cache', JSON.stringify(this.cache));
        } catch (error) {
            console.warn("Erro ao salvar cache de IA:", error);
        }
    },
    
    // Gera um ID de cache baseado nas prefer√™ncias
    generateCacheId(preferences) {
        // Cria uma chave concatenando valores principais
        const companhia = preferences.companhia || '0';
        const preferencia = preferences.preferencia_viagem || '0';
        const moeda = preferences.moeda_escolhida || 'BRL';
        return `${companhia}_${preferencia}_${moeda}`;
    },
    
    // Verifica se h√° dados em cache v√°lidos
    hasCachedData(cacheId) {
        if (!this.cache.recommendations[cacheId]) return false;
        
        const cacheTime = this.cache.timestamp[cacheId] || 0;
        const now = Date.now();
        
        // Verifica se o cache ainda √© v√°lido
        return (now - cacheTime) < this.config.cacheDuration;
    },

    /**
     * Obt√©m recomenda√ß√µes de destinos baseadas nas prefer√™ncias do usu√°rio
     */
    async obterRecomendacoes(preferences) {
        // Notifica in√≠cio do processo
        this.dispatchProgressEvent(10, "Iniciando an√°lise de suas prefer√™ncias de viagem... üîç");
        
        try {
            // Verificar se a chave API est√° configurada
            if (!this.validateApiKey()) {
                throw new Error("A chave da API OpenAI n√£o est√° configurada corretamente. Verifique o arquivo config.js e coloque uma chave v√°lida.");
            }
            
            // Verificar se preferences √© v√°lido
            if (!preferences || typeof preferences !== 'object') {
                console.warn("Prefer√™ncias inv√°lidas:", preferences);
                throw new Error("Prefer√™ncias de viagem inv√°lidas");
            }
            
            // Gera ID para cache
            const cacheId = this.generateCacheId(preferences);
            
            // Verifica se temos dados em cache
            if (this.hasCachedData(cacheId)) {
                this.dispatchProgressEvent(100, "Recomenda√ß√µes encontradas! üéâ");
                return this.cache.recommendations[cacheId];
            }
            
            // Prepara√ß√£o dos dados
            this.dispatchProgressEvent(30, "Processando suas prefer√™ncias... üßÆ");
            const prompt = this.prepareAIPrompt(preferences);
            
            // Chamada √† API de IA
            this.dispatchProgressEvent(50, "Consultando destinos ideais para seu perfil... üåç");
            const aiResponse = await this.callAIService(prompt);
            
            // Processamento da resposta
            this.dispatchProgressEvent(80, "Organizando as melhores op√ß√µes para voc√™... üóÇÔ∏è");
            const destinations = await this.processAIResponse(aiResponse, preferences);
            
            // Salva no cache
            this.cache.recommendations[cacheId] = destinations;
            this.cache.timestamp[cacheId] = Date.now();
            this.saveCache();
            
            // Salvar no localStorage para uso em outras p√°ginas
            localStorage.setItem('benetrip_recomendacoes', JSON.stringify(destinations));
            
            // Finaliza processo
            this.dispatchProgressEvent(100, "Recomenda√ß√µes prontas! üéâ");
            return destinations;
            
        } catch (error) {
            console.error("Erro ao obter recomenda√ß√µes:", error);
            this.dispatchProgressEvent(100, "Erro ao obter recomenda√ß√µes üòî");
            
            // Propagar o erro com mensagem clara
            if (error.message.includes("401") || error.message.includes("Incorrect API key")) {
                throw new Error("Erro de autentica√ß√£o com a API OpenAI. Sua chave API parece ser inv√°lida ou expirada. Por favor, verifique-a no arquivo config.js.");
            } else {
                throw error;
            }
        }
    },
    
    /**
     * Prepara o prompt para a API de IA
     */
    prepareAIPrompt(preferences) {
        // Extrair dados relevantes das prefer√™ncias
        const {companhia, preferencia_viagem, moeda_escolhida, orcamento_valor, datas, cidade_partida} = preferences;
        
        // Mapear tipos de companhia para descri√ß√µes
        const companhiaMap = {
            0: "sozinho",
            1: "em casal (viagem rom√¢ntica)",
            2: "em fam√≠lia",
            3: "com amigos"
        };
        
        // Mapear prefer√™ncias de viagem
        const preferenciaMap = {
            0: "relaxamento e descanso (praias, resorts tranquilos, spas)",
            1: "aventura e atividades ao ar livre (trilhas, esportes, natureza)",
            2: "cultura, hist√≥ria e gastronomia (museus, centros hist√≥ricos, culin√°ria local)",
            3: "experi√™ncia urbana, compras e vida noturna (centros urbanos, lojas, restaurantes)"
        };
        
        // Informa√ß√µes sobre datas da viagem
        const dataInfo = datas ? `Per√≠odo da viagem: ${datas.dataIda} a ${datas.dataVolta}` : "Sem per√≠odo definido";
        
        // Informa√ß√£o da cidade de origem
        const origemInfo = cidade_partida ? 
            `Partindo de ${cidade_partida.name}, ${cidade_partida.country || ''}` : 
            "Origem n√£o especificada";
        
        return `
        Voc√™ √© a Tripinha, uma cachorra vira-lata caramelo especialista em viagens da Benetrip.
        Preciso que recomende 6 destinos de viagem, considerando as seguintes prefer√™ncias:
        
        - ${origemInfo}
        - Viajando ${companhiaMap[companhia] || 'sozinho'}
        - Busca principalmente: ${preferenciaMap[preferencia_viagem] || 'relaxamento e descanso'}
        - Or√ßamento para passagens a√©reas: ${orcamento_valor || 'flex√≠vel'} ${moeda_escolhida || 'BRL'} por pessoa
        - ${dataInfo}
        
        Forne√ßa exatamente 6 destinos no seguinte formato JSON:
        {
          "destinations": [
            {
              "cidade": "Nome da cidade",
              "pais": "Nome do pa√≠s",
              "codigo_pais": "C√≥digo de 2 letras do pa√≠s",
              "codigo_iata": "C√≥digo IATA do aeroporto principal",
              "descricao_curta": "Breve descri√ß√£o de uma linha",
              "preco_passagem": valor num√©rico estimado (apenas para passagem a√©rea),
              "preco_hospedagem": valor num√©rico por noite,
              "experiencias": "3 experi√™ncias imperd√≠veis separadas por v√≠rgula",
              "custo_total": valor num√©rico estimado para 5 dias,
              "porque_ir": "Uma frase curta e envolvente sobre o destino"
            },
            ...mais 5 destinos
          ]
        }
        
        Importante:
        1. O primeiro destino deve ser a melhor correspond√™ncia para as prefer√™ncias.
        2. O √∫ltimo (sexto) destino ser√° usado como "destino surpresa", ent√£o deve ser mais inusitado.
        3. Todos os destinos DEVEM respeitar o or√ßamento para passagens a√©reas.
        4. O c√≥digo_pais deve ser o c√≥digo ISO de 2 letras (ex: br, us, pt).
        5. Certifique-se de que os valores estejam na moeda solicitada (${moeda_escolhida || 'BRL'}).
        6. Os pre√ßos e estimativas devem ser realistas para a regi√£o.
        `;
    },
    
    /**
     * Chama o servi√ßo de IA para obter recomenda√ß√µes
     */
    async callAIService(prompt) {
        // Verificar se temos uma chave de API configurada
        if (!this.config.apiKey) {
            throw new Error("Chave de API de IA n√£o configurada");
        }
        
        try {
            console.log("Enviando solicita√ß√£o para a API...");
            
            // Chamada √† API da OpenAI
            const response = await fetch(this.config.apiEndpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.config.apiKey}`
                },
                body: JSON.stringify({
                    model: this.config.model,
                    messages: [
                        {role: "system", content: "Voc√™ √© um assistente especializado em viagens que fornece recomenda√ß√µes de destinos em formato JSON estruturado."},
                        {role: "user", content: prompt}
                    ],
                    temperature: 0.7,
                    response_format: { type: "json_object" }
                })
            });
            
            if (!response.ok) {
                const error = await response.json();
                // Adicione informa√ß√µes mais detalhadas sobre o erro espec√≠fico
                let errorMessage = `Erro na API: ${response.status}`;
                
                if (error.error) {
                    if (error.error.message) {
                        errorMessage += ` - ${error.error.message}`;
                    }
                    
                    if (error.error.code) {
                        errorMessage += ` (c√≥digo: ${error.error.code})`;
                    }
                }
                
                // Adicionar mensagem espec√≠fica para erro de autentica√ß√£o
                if (response.status === 401) {
                    errorMessage += ". Sua chave API da OpenAI parece ser inv√°lida ou expirada. Verifique-a no arquivo config.js.";
                }
                
                throw new Error(errorMessage);
            }
            
            const data = await response.json();
            return data.choices[0].message.content;
        } catch (error) {
            console.error("Erro ao chamar servi√ßo de IA:", error);
            throw error;
        }
    },

    /**
     * Busca imagens para os destinos
     */
    async getDestinationImages(destino) {
        try {
            // Pegando a chave da API Unsplash da configura√ß√£o
            const accessKey = window.BENETRIP_CONFIG?.credentials?.unsplash || 
                             'x8q70wHdUpQoKmNtBmhfEbatdsxyapgkUEBgxQav708';
                             
            const query = `${destino.cidade} ${destino.pais} landmark`;
            const encodedQuery = encodeURIComponent(query);
            
            const response = await fetch(`https://api.unsplash.com/search/photos?query=${encodedQuery}&per_page=2&orientation=landscape&client_id=${accessKey}`);
            
            if (!response.ok) {
                throw new Error(`Erro na API de imagens: ${response.status}`);
            }
            
            const data = await response.json();
            
            // Se encontrou imagens, retornar URLs
            if (data.results && data.results.length > 0) {
                return {
                    principal: data.results[0].urls.regular,
                    secundaria: data.results.length > 1 ? data.results[1].urls.regular : data.results[0].urls.regular
                };
            }
            
            throw new Error("Nenhuma imagem encontrada");
        } catch (error) {
            console.error(`Erro ao buscar imagens para ${destino.cidade}:`, error);
            
            // Usar o Pixabay como fallback para imagens
            try {
                const pixabayKey = window.BENETRIP_CONFIG?.credentials?.pexels || 
                                  'GtZcnoPlphF95dn7SsHt7FewD8YYlDQCkBK2vDD4Z7AUt5flGFFJwMEt';
                const query = `${destino.cidade} ${destino.pais} travel`;
                const encodedQuery = encodeURIComponent(query);
                
                const response = await fetch(`https://pixabay.com/api/?key=${pixabayKey}&q=${encodedQuery}&image_type=photo&orientation=horizontal&category=travel&per_page=2`);
                
                if (!response.ok) {
                    throw new Error(`Erro na API Pixabay: ${response.status}`);
                }
                
                const data = await response.json();
                
                if (data.hits && data.hits.length > 0) {
                    return {
                        principal: data.hits[0].webformatURL,
                        secundaria: data.hits.length > 1 ? data.hits[1].webformatURL : data.hits[0].webformatURL
                    };
                }
            } catch (pixabayError) {
                console.error("Erro no fallback de imagens:", pixabayError);
            }
            
            // Se ambas as APIs falharem, usar URLs gen√©ricas
            return {
                principal: `https://source.unsplash.com/1600x900/?${encodeURIComponent(destino.cidade)},landmark`,
                secundaria: `https://source.unsplash.com/1600x900/?${encodeURIComponent(destino.pais)},travel`
            };
        }
    },

    /**
     * Processa a resposta da IA e converte para formato utiliz√°vel
     */
    async processAIResponse(response, preferences) {
        try {
            // Parseamento da resposta JSON
            let parsedResponse;
            
            if (typeof response === 'string') {
                const jsonMatch = response.match(/\{[\s\S]*\}/);
                if (jsonMatch) {
                    parsedResponse = JSON.parse(jsonMatch[0]);
                } else {
                    throw new Error("Formato de resposta inv√°lido");
                }
            } else {
                parsedResponse = response;
            }
            
            // Verificar se h√° array de destinos
            if (!parsedResponse.destinations || !Array.isArray(parsedResponse.destinations)) {
                throw new Error("Resposta n√£o cont√©m lista de destinos");
            }
            
            // Separar os destinos
            const destinos = parsedResponse.destinations;
            
            // Validar que temos os 6 destinos necess√°rios
            if (destinos.length < 6) {
                throw new Error(`N√∫mero insuficiente de destinos: ${destinos.length}, necess√°rio 6`);
            }
            
            // Separar o destino principal (top), os alternativos e o surpresa
            const destinoPrincipal = destinos[0];
            const destinosAlternativos = destinos.slice(1, 5);
            const destinoSurpresa = destinos[5];
            
            // Array para armazenar as promessas de processamento
            const processamentoPromessas = [];
            
            // Processar destino principal
            processamentoPromessas.push(this.processarDestino(destinoPrincipal, 1, preferences, true));
            
            // Processar destinos alternativos
            destinosAlternativos.forEach((destino, index) => {
                processamentoPromessas.push(this.processarDestino(destino, index + 2, preferences, false));
            });
            
            // Processar destino surpresa
            processamentoPromessas.push(this.processarDestino(destinoSurpresa, 6, preferences, false, true));
            
            // Aguardar todas as promessas
            const destinosProcessados = await Promise.all(processamentoPromessas);
            
            // Separar novamente para organizar conforme necess√°rio pela interface
            const resultado = {
                principal: destinosProcessados[0],
                alternativos: destinosProcessados.slice(1, 5),
                surpresa: destinosProcessados[5]
            };
            
            return resultado;
        } catch (error) {
            console.error("Erro ao processar resposta da IA:", error);
            throw error;
        }
    },

    async processarDestino(destino, ranking, preferences, isPrincipal = false, isSurpresa = false) {
        // Buscar imagens para o destino
        const imagens = await this.getDestinationImages(destino);
        
        // Adicionar propriedades extras necess√°rias
        return {
            ...destino,
            id: `dest-${ranking}`,
            moeda: preferences.moeda_escolhida || 'BRL',
            ranking: ranking,
            imagens: imagens,
            isPrincipal: isPrincipal,
            isSurpresa: isSurpresa,
            comentario_tripinha: this.generateTripinhaComment(destino, preferences, isSurpresa)
        };
    },

    /**
     * Gera um coment√°rio personalizado da Tripinha para cada destino
     */
    generateTripinhaComment(destino, preferences, isSurpresa = false) {
        // Array de templates de coment√°rios para destinos normais
        const comentariosNormais = [
            `Eu simplesmente AMEI ${destino.cidade}! ${destino.porque_ir} √â perfeito para quem viaja ${isSurpresa ? 'buscando surpresas' : 'querendo ' + this.getPreferenciaTexto(preferences.preferencia_viagem)}! üêæ`,
            
            `${destino.cidade} √© incr√≠vel! ${destino.porque_ir} Voc√™ vai se apaixonar pelos lugares e experi√™ncias que esse destino oferece! ‚ú®üê∂`,
            
            `Farejei esse destino especialmente para voc√™! ${destino.cidade} tem tudo o que voc√™ est√° buscando. ${destino.porque_ir} üêæüåç`,
            
            `O que acha de explorar ${destino.cidade}? ${destino.porque_ir} √â perfeito para sua viagem! J√° estou ansiosa pra voc√™ conhecer! üß≥`
        ];
        
        // Array de templates de coment√°rios para destinos surpresa
        const comentariosSurpresa = [
            `Uau! Este √© meu destino surpresa favorito! ${destino.cidade} vai te surpreender completamente. ${destino.porque_ir} Confie no meu faro! üêæüéÅ`,
            
            `Sei que voc√™ n√£o esperava por essa, mas ${destino.cidade} √© uma joia escondida que poucos conhecem! ${destino.porque_ir} Que tal se aventurar? üïµÔ∏è‚Äç‚ôÄÔ∏èüê∂`,
            
            `Olha que surpresa incr√≠vel! ${destino.cidade} n√£o √© um destino √≥bvio, mas √© PERFEITO para voc√™! ${destino.porque_ir} Vai por mim! üéØüêæ`
        ];
        
        // Selecionar array de coment√°rios com base no tipo do destino
        const comentarios = isSurpresa ? comentariosSurpresa : comentariosNormais;
        
        // Retornar um coment√°rio aleat√≥rio do array correspondente
        return comentarios[Math.floor(Math.random() * comentarios.length)];
    },

    /**
     * Retorna texto descritivo para a prefer√™ncia de viagem
     */
    getPreferenciaTexto(preferencia) {
        const textos = [
            "relaxar e descansar",
            "viver aventuras",
            "descobrir cultura e gastronomia",
            "explorar a vida urbana"
        ];
        
        return textos[preferencia] || "se divertir";
    },

    /**
     * Despacha evento de progresso para atualizar a interface
     */
    dispatchProgressEvent(progress, message) {
        try {
            const event = new CustomEvent('benetrip_progress', {
                detail: {
                    progress: progress,
                    message: message
                }
            });
            window.dispatchEvent(event);
        } catch (error) {
            console.warn("Erro ao despachar evento de progresso:", error);
        }
    }
};

// Exporta o servi√ßo para uso global
window.BENETRIP_AI = BENETRIP_AI;
